1
00:00:00,001 --> 00:00:03,802
[MUSIC]

2
00:00:03,804 --> 00:00:08,440
Stanford University. >> Okay, well,

3
00:00:08,442 --> 00:00:14,146
welcome to Lecture 17 of Stanford CS193P

4
00:00:14,148 --> 00:00:19,518
spring of 2016. This is our penultimate lecture that

5
00:00:19,520 --> 00:00:23,822
actually has content. Next week we have Memorial Day, and

6
00:00:23,824 --> 00:00:27,760
then we'll have our alternate final on Wednesday.

7
00:00:27,762 --> 00:00:28,861
So what are we gonna talk about today?

8
00:00:28,863 --> 00:00:31,130
Today we're gonna talk about segues, okay?

9
00:00:31,132 --> 00:00:32,398
We've talked a lot about segues, but

10
00:00:32,400 --> 00:00:36,602
there's still quite a few more segues to be talked about. And

11
00:00:36,604 --> 00:00:39,738
then we're gonna talk about core location and MapKit,

12
00:00:39,740 --> 00:00:43,876
which is kind of where is the device in the world. And then

13
00:00:43,878 --> 00:00:46,812
I'm gonna do a demo, I'll do as much as the demo as I can,

14
00:00:46,814 --> 00:00:48,247
and we'll just continue it on Wednesday.

15
00:00:48,249 --> 00:00:50,616
The demo's gonna be about maps and segues, obviously,

16
00:00:50,618 --> 00:00:53,719
that's what we're talking about today. All right? So

17
00:00:53,721 --> 00:00:55,220
let's dive right in here to segues.

18
00:00:55,222 --> 00:00:59,792
The first segue I'm gonna talk about is the modal segue. So,

19
00:00:59,794 --> 00:01:03,095
this modal segue is the segue to an MVC that is gonna

20
00:01:03,097 --> 00:01:05,697
completely take over your screen, okay?

21
00:01:05,699 --> 00:01:08,834
You are fully responsible if you put a modal segue up for

22
00:01:08,836 --> 00:01:11,670
providing a way for a user to get out of it, okay.

23
00:01:11,672 --> 00:01:15,307
Because that MVC is completely in control.

24
00:01:15,309 --> 00:01:18,977
This kind of UI should be used with care, okay, because you

25
00:01:18,979 --> 00:01:22,214
really are locking down the UI, there's nothing else

26
00:01:22,216 --> 00:01:24,817
the user can do. They can't. If they change their mind,

27
00:01:24,819 --> 00:01:27,653
they can't go to another tab cuz it's not a tab bar thing.

28
00:01:27,655 --> 00:01:30,022
They can't just hit back in a navigation controller,

29
00:01:30,024 --> 00:01:32,224
they can't go to the other side of their split view or

30
00:01:32,226 --> 00:01:35,494
whatever. They're pretty much stuck here until you let them,

31
00:01:35,496 --> 00:01:39,598
out of it. And so, I don't even show you this until late

32
00:01:39,600 --> 00:01:40,466
in the quarter because

33
00:01:40,468 --> 00:01:43,802
I really don't want you to think of this as a go to way

34
00:01:43,804 --> 00:01:47,406
to present an MVC on screen, okay? But it does have its

35
00:01:47,408 --> 00:01:50,242
uses, okay? Here's an example, perhaps. Okay,

36
00:01:50,244 --> 00:01:54,746
this is a contacts app, or an app that has contacts in it.

37
00:01:54,748 --> 00:01:56,281
And we're showing the contacts and

38
00:01:56,283 --> 00:01:59,585
the little plus button in the corner here, let's say that,

39
00:01:59,587 --> 00:02:02,521
that button's going to allow us to enter a new contact.

40
00:02:02,523 --> 00:02:05,691
Now, you could argue if the user has chosen to enter a new

41
00:02:05,693 --> 00:02:09,428
contact. They don't wanna do anything else except for

42
00:02:09,430 --> 00:02:10,028
that right now, and so

43
00:02:10,030 --> 00:02:13,298
it's okay to present this adding contact view controller

44
00:02:13,300 --> 00:02:17,436
modally. Modally just means in a mode where you can't

45
00:02:17,438 --> 00:02:19,605
do anything else but this. Yeah,

46
00:02:19,607 --> 00:02:21,573
one could argue there might be other ways to do this,

47
00:02:21,575 --> 00:02:24,209
but let's, let's say that we're gonna do it this way.

48
00:02:24,211 --> 00:02:27,913
So we tap on this plus sign, and from the bottom slides up

49
00:02:27,915 --> 00:02:30,916
this new MVC. Now, this new MVC is completely controlling

50
00:02:30,918 --> 00:02:34,253
the screen. It doesn't have a back button that cancel button

51
00:02:34,255 --> 00:02:37,256
that you see right there. Is a button that this MVC is

52
00:02:37,258 --> 00:02:40,893
putting in that bar, okay, it happens to cancel and

53
00:02:40,895 --> 00:02:42,995
not add a new contact in this case.

54
00:02:42,997 --> 00:02:45,564
Cuz it's not a push segue, it's a modal segue,

55
00:02:45,566 --> 00:02:48,901
different kind of segue. And the thing about modal, as you

56
00:02:48,903 --> 00:02:52,137
can actually have embedded modal inside modal, okay? So,

57
00:02:52,139 --> 00:02:55,541
for example here, I am adding my contact, let's say now,

58
00:02:55,543 --> 00:02:58,010
I wanna choose the photo for my contact, okay?

59
00:02:58,012 --> 00:03:01,280
That's, also going to put up a modal MVC to get that. So

60
00:03:01,282 --> 00:03:05,117
I click on that, another MVC slides off in the bottom so

61
00:03:05,119 --> 00:03:06,451
now, I have two modal ones.

62
00:03:06,453 --> 00:03:08,554
And you might think of this as a little bit like,

63
00:03:08,556 --> 00:03:08,787
navigation control but

64
00:03:08,789 --> 00:03:10,756
they're on a stack, but that's really not the way it is.

65
00:03:10,758 --> 00:03:14,393
It's just the ad contact MVC took over the entire world and

66
00:03:14,395 --> 00:03:18,096
then, it gave it to the photos one and it completely took

67
00:03:18,098 --> 00:03:20,599
over the world. And until it's dismissed,

68
00:03:20,601 --> 00:03:22,234
the other ones don't even really matter,

69
00:03:22,236 --> 00:03:26,872
okay. Now, again notice no back button here. Also notice

70
00:03:26,874 --> 00:03:30,042
by the way that cancel button has moved over from the right,

71
00:03:30,044 --> 00:03:32,110
whereas on previous MVC had it on the left.

72
00:03:32,112 --> 00:03:35,113
I'm not a big fun of this kind of UI, by the way.

73
00:03:35,115 --> 00:03:36,181
I think, things like cancel,

74
00:03:36,183 --> 00:03:38,784
if they're conceptually the same thing in two MVCs.

75
00:03:38,786 --> 00:03:41,753
Especially, two MVCs that appear back to back like this,

76
00:03:41,755 --> 00:03:43,088
should probably be in the same place.

77
00:03:43,090 --> 00:03:47,292
So I would have put the cancel buttons both on the left here.

78
00:03:47,294 --> 00:03:51,430
But whatever app this is or from where these contacts

79
00:03:51,432 --> 00:03:55,100
came from, I decided to do that. But in any case,

80
00:03:55,102 --> 00:03:59,538
no back button here. Right? Make sense? Okay,

81
00:03:59,540 --> 00:04:04,243
so, let's cancel this and we'll see what happens to this

82
00:04:04,245 --> 00:04:07,112
modal MVC. This cancel is a way to get out of it.

83
00:04:07,114 --> 00:04:07,579
And when we cancel it,

84
00:04:07,581 --> 00:04:10,549
of course, it slides back out. And the other MVC is still

85
00:04:10,551 --> 00:04:14,720
there. Okay? Nothing has changed. And here, of course,

86
00:04:14,722 --> 00:04:17,789
if we cancel this one, then we'll go back to where we were

87
00:04:17,791 --> 00:04:21,193
before. And this MVC goes away. So that's modal, right?

88
00:04:21,195 --> 00:04:24,029
You press the MVC. It lives, it does whatever it does.

89
00:04:24,031 --> 00:04:26,265
It completely takes over the app and then somehow,

90
00:04:26,267 --> 00:04:29,167
you press something to get out of it. Cancel or done, or

91
00:04:29,169 --> 00:04:33,605
whatever, but that's totally up to that MVC. Right? So,

92
00:04:33,607 --> 00:04:37,109
be careful is all I say about this. Don't go to modal first.

93
00:04:37,111 --> 00:04:39,845
Think about whether there's a way to put it in a tab or

94
00:04:39,847 --> 00:04:43,348
in your navigation stack, or something like that. Before

95
00:04:43,350 --> 00:04:46,752
you jump right to choosing modal. All right, so how do we

96
00:04:46,754 --> 00:04:49,154
set up a modal segue? How do we do one of these?

97
00:04:49,156 --> 00:04:51,957
Just like all the other segues we've been doing,

98
00:04:51,959 --> 00:04:55,927
you just CTRL+drag, from the thing that's going to cause

99
00:04:55,929 --> 00:04:59,331
the modal segue to happen, to the MVC that's going to take

100
00:04:59,333 --> 00:05:02,601
over the world. When you do that by the way, an important

101
00:05:02,603 --> 00:05:05,137
thing to notice is that you can inspect the segue, and

102
00:05:05,139 --> 00:05:07,939
a modal segue has different kinda things you can choose.

103
00:05:07,941 --> 00:05:10,709
Which I'm gonna talk about, like how the modal segue is

104
00:05:10,711 --> 00:05:12,511
presented. Does it slide up from the bottom or

105
00:05:12,513 --> 00:05:15,013
do something else? And also, what does the modal segue

106
00:05:15,015 --> 00:05:18,216
look like when it's there? Is it a take over the full screen

107
00:05:18,218 --> 00:05:20,319
kind, okay, or is it some other kind.

108
00:05:20,321 --> 00:05:23,822
We'll talk about what those other kinds can be. All right?

109
00:05:23,824 --> 00:05:28,727
If you wanna present a modal MVC not from a button, okay or

110
00:05:28,729 --> 00:05:30,062
from a bar button item.

111
00:05:30,064 --> 00:05:31,496
You wanna do it from something else. Of course,

112
00:05:31,498 --> 00:05:33,865
you can present it using the normal form segue with

113
00:05:33,867 --> 00:05:35,934
identifier from your code. We've seen a couple of

114
00:05:35,936 --> 00:05:39,705
examples of that in the demos and of course, modal, you can

115
00:05:39,707 --> 00:05:42,741
do that as well. You also, if you have a view controller in

116
00:05:42,743 --> 00:05:44,710
your hand, you actually have an instance of a view

117
00:05:44,712 --> 00:05:47,212
controller like remember alert view controller, right?

118
00:05:47,214 --> 00:05:49,681
You say new alert view controller and you get one,

119
00:05:49,683 --> 00:05:53,118
now you have one. You can put it up using this method right

120
00:05:53,120 --> 00:05:56,455
here, which we actually saw in one of the other demos,

121
00:05:56,457 --> 00:05:59,257
alert demo there. Actually I don't know if I demoed it,

122
00:05:59,259 --> 00:06:01,660
but we talked about it in alerts, which is present

123
00:06:01,662 --> 00:06:03,628
view controller. And you just give it the view controller

124
00:06:03,630 --> 00:06:06,264
that you have in your hand and whether you want it

125
00:06:06,266 --> 00:06:09,668
to be an animated transition, which usually you do. And

126
00:06:09,670 --> 00:06:12,070
then you just got a little handler here at the end,

127
00:06:12,072 --> 00:06:15,440
that will get called when it has finished being presented.

128
00:06:15,442 --> 00:06:18,009
You usually don't need that, but just in case, you do.

129
00:06:18,011 --> 00:06:20,178
All right. So this is how you present something modally.

130
00:06:20,180 --> 00:06:23,115
This is only for modalPresentations, all right?

131
00:06:23,117 --> 00:06:24,516
If you have the view controller in your hand,

132
00:06:24,518 --> 00:06:28,453
which is rare. Generally, it's things you got from iOS,

133
00:06:28,455 --> 00:06:30,922
like maybe the camera view controller, or

134
00:06:30,924 --> 00:06:34,059
the alert view controller, some things like that.

135
00:06:34,061 --> 00:06:37,462
Notice that in horizontally regular environment,

136
00:06:37,464 --> 00:06:40,732
horizontally regular, not compact. You there's

137
00:06:40,734 --> 00:06:44,169
a modalPresentationStyle var in a view controller, that'll,

138
00:06:44,171 --> 00:06:47,305
that'll specify basically how this view controller gets

139
00:06:47,307 --> 00:06:50,175
presented when it gets presented modally. Does it get

140
00:06:50,177 --> 00:06:53,512
presented full screen where it takes the whole full screen?

141
00:06:53,514 --> 00:06:57,382
OverFullScreen which means, it goes over the whole screen but

142
00:06:57,384 --> 00:06:58,283
it, the one behind,

143
00:06:58,285 --> 00:07:01,286
whatever is existing on this screen is visible. So

144
00:07:01,288 --> 00:07:03,288
if you had a clear view controller,

145
00:07:03,290 --> 00:07:03,989
you'd be able to see through it.

146
00:07:03,991 --> 00:07:07,592
So you have things underneath. Pop over, of course you guys

147
00:07:07,594 --> 00:07:10,462
know what a pop over is. A pop over is just a modal,

148
00:07:10,464 --> 00:07:15,033
a modal MVC, but it's kinda got some special presentation

149
00:07:15,035 --> 00:07:18,136
characteristics. There's also form sheet and page sheet,

150
00:07:18,138 --> 00:07:21,339
things like that, which kinda present in different ways.

151
00:07:21,341 --> 00:07:24,242
You can play with those, by inspecting the segue in

152
00:07:24,244 --> 00:07:27,712
the storyboard and choosing different presentation styles.

153
00:07:27,714 --> 00:07:31,283
Note that in horizontally compact environments, however,

154
00:07:31,285 --> 00:07:35,754
it's basically the iPhone in portrait. The system, when you

155
00:07:35,756 --> 00:07:40,091
do the presentViewController will by default,

156
00:07:40,093 --> 00:07:42,327
adapt to be full screen, okay?

157
00:07:42,329 --> 00:07:46,164
So if you try to present something in form sheet mode,

158
00:07:46,166 --> 00:07:50,101
okay? On an iPhone, it'll come up as full screen, cuz it'll

159
00:07:50,103 --> 00:07:54,406
adapt to the fact that it's on the phone. It doesn't really

160
00:07:54,408 --> 00:07:58,844
have enough width to do a form sheet for you, okay?

161
00:07:58,846 --> 00:08:02,047
How do you prepare for a Modal segue? Nothing to see here,

162
00:08:02,049 --> 00:08:04,616
okay? It's just like any other segue you've ever done.

163
00:08:04,618 --> 00:08:06,751
Nothing special about it. Just check the identifier,

164
00:08:06,753 --> 00:08:09,321
get the destination view controller and prepare it.

165
00:08:09,323 --> 00:08:12,958
How do you hear back from a modal view controller?

166
00:08:12,960 --> 00:08:15,460
You put something some up modally and it does something,

167
00:08:15,462 --> 00:08:18,230
okay? You add to new contact, how do you hear back

168
00:08:18,232 --> 00:08:21,166
with the results of what it did? Okay? Well,

169
00:08:21,168 --> 00:08:26,271
there's a couple of ways to do this. One is that the add

170
00:08:26,273 --> 00:08:29,674
contact thing might be putting the contact in a database,

171
00:08:29,676 --> 00:08:32,644
some modal that is shared by the guy who put it up.

172
00:08:32,646 --> 00:08:35,113
So then you don't need to do anything, okay. When the modal

173
00:08:35,115 --> 00:08:36,715
thing gets dismissed, you'll come back and there'll be

174
00:08:36,717 --> 00:08:39,384
something else in the database that wasn't there before.

175
00:08:39,386 --> 00:08:42,988
Another way is using an unwind segue which I'm gonna talk

176
00:08:42,990 --> 00:08:45,891
about in few slides here. And then another way is

177
00:08:45,893 --> 00:08:48,660
delegation. And the reason we have to use delegation or

178
00:08:48,662 --> 00:08:51,396
unwind or something like that is because when you present

179
00:08:51,398 --> 00:08:53,932
a view controller modally, it's part of your view.

180
00:08:53,934 --> 00:08:56,701
It's part of the presenting view controller's view.

181
00:08:56,703 --> 00:09:00,472
So that thing can't talk back in any way, except for

182
00:09:00,474 --> 00:09:02,240
those blind structured ways we talked about,

183
00:09:02,242 --> 00:09:07,245
like delegation, okay? How do you dismiss a view controller,

184
00:09:07,247 --> 00:09:10,115
right? So a view controller's up, and it's collecting

185
00:09:10,117 --> 00:09:12,584
the new contact, and then the user puts Cancel or

186
00:09:12,586 --> 00:09:16,154
Done, how do we make it go away? The answer is you ask

187
00:09:16,156 --> 00:09:19,424
the presenting view controller to dismiss you, always

188
00:09:19,426 --> 00:09:22,928
the presenting view controller dismisses you. All right? And

189
00:09:22,930 --> 00:09:26,164
you send it the message dismissViewControllerAnimated

190
00:09:26,166 --> 00:09:27,432
to the presenting view controller and

191
00:09:27,434 --> 00:09:31,069
it's going to dismiss whatever modal view controller it has

192
00:09:31,071 --> 00:09:34,973
presented, okay? So that's sent to the presenting.

193
00:09:34,975 --> 00:09:38,143
I can't emphasize that enough. Now, in the old days,

194
00:09:38,145 --> 00:09:40,312
people used to send it to the presented.

195
00:09:40,314 --> 00:09:41,846
The API was a little bit different, okay?

196
00:09:41,848 --> 00:09:44,215
And then sent it to the presented view controller,

197
00:09:44,217 --> 00:09:46,084
the one that's actually up, okay?

198
00:09:46,086 --> 00:09:49,287
And, that's wrong. For backwards compatibility,

199
00:09:49,289 --> 00:09:50,622
if you sent it to the presented one,

200
00:09:50,624 --> 00:09:53,892
and the presented one had not presented another one,

201
00:09:53,894 --> 00:09:56,561
then it would dismiss it. But don't write your code to

202
00:09:56,563 --> 00:09:59,464
depend on that kind of backwards compatibility mode.

203
00:09:59,466 --> 00:10:02,534
When you wanna dismiss it, you send it to the presenting.

204
00:10:02,536 --> 00:10:05,937
Now the great thing is that the presented has a var

205
00:10:05,939 --> 00:10:08,640
called presenting view controller, which is the view

206
00:10:08,642 --> 00:10:11,009
controller that presented it. So it's very easy for

207
00:10:11,011 --> 00:10:13,778
the presented one to dismiss itself by asking

208
00:10:13,780 --> 00:10:17,682
its presenting view controller to dismiss it. You see.

209
00:10:17,684 --> 00:10:20,251
But that's the way you wanna write that code.

210
00:10:20,253 --> 00:10:22,420
Okay, if you do an unwind segue,

211
00:10:22,422 --> 00:10:24,322
again, which I'm gonna talk about in a few slides,

212
00:10:24,324 --> 00:10:26,791
it automatically dismisses. So when you unwind,

213
00:10:26,793 --> 00:10:29,094
you don't have to call dismissViewController.

214
00:10:29,096 --> 00:10:30,195
Just automatically dismisses. So

215
00:10:30,197 --> 00:10:33,031
we're talking about unwinding in a second. All right,

216
00:10:33,033 --> 00:10:37,902
so in addition to how the modal view controller appears,

217
00:10:37,904 --> 00:10:39,704
like form sheet or popover or whatever,

218
00:10:39,706 --> 00:10:42,440
there's also how it gets transitioned onto the screen,

219
00:10:42,442 --> 00:10:45,977
what animation gets used. Okay, so, CoverVertical is

220
00:10:45,979 --> 00:10:48,313
the slides up from the bottom, FlipHorizontal,

221
00:10:48,315 --> 00:10:50,248
exactly what you would think, the presented and

222
00:10:50,250 --> 00:10:53,952
the presenting flip, are on like two sides of a card and

223
00:10:53,954 --> 00:10:54,319
it flips over.

224
00:10:54,321 --> 00:10:56,955
You got CrossDissolve which is all between the two.

225
00:10:56,957 --> 00:11:00,792
Even PartialCurl which will partially curl a presenting

226
00:11:00,794 --> 00:11:05,263
one up showing the presented behind it. Kind of just at

227
00:11:05,265 --> 00:11:06,731
the bottom. It's kind of looks really cool.

228
00:11:06,733 --> 00:11:08,466
You see it sometimes with map applications and

229
00:11:08,468 --> 00:11:13,071
stuff you curl the map up and there's something underneath.

230
00:11:14,274 --> 00:11:17,275
All right, let's talk about that wi, unwind segue.

231
00:11:17,277 --> 00:11:18,243
Right, you have these MVCs,

232
00:11:18,245 --> 00:11:21,012
they wanna communicate back, or they wanna jump back.

233
00:11:21,014 --> 00:11:23,248
Maybe, something's on a navigation stack and

234
00:11:23,250 --> 00:11:26,317
wants to jump back farther than just one pop, okay?

235
00:11:26,319 --> 00:11:27,752
You can do all this with an unwind.

236
00:11:27,754 --> 00:11:31,423
Now, unwind segues are weird because they violate the thing

237
00:11:31,425 --> 00:11:32,924
I told you would never violate it,

238
00:11:32,926 --> 00:11:37,062
which is that segues always create a new MVC. Okay, and

239
00:11:37,064 --> 00:11:41,132
that's generally true if you modally segue or show segue or

240
00:11:41,134 --> 00:11:42,701
any of these other kinds of segues,

241
00:11:42,703 --> 00:11:46,604
it creates a new MVC every time except unwind. Because

242
00:11:46,606 --> 00:11:50,375
unwind is gonna segue back to somebody who presented you,

243
00:11:50,377 --> 00:11:52,844
maybe not the guy who immediately presented to you,

244
00:11:52,846 --> 00:11:54,279
maybe somebody who presented to the guy

245
00:11:54,281 --> 00:11:54,779
who presented to you but

246
00:11:54,781 --> 00:11:57,282
you're gonna be going back to an existing view controller.

247
00:11:57,284 --> 00:12:01,786
You're gonna unwind. Okay, your view controllers.

248
00:12:01,788 --> 00:12:03,822
What's it good for? Like I said, good for

249
00:12:03,824 --> 00:12:06,925
communicating back information after a modal one is done,

250
00:12:06,927 --> 00:12:09,561
and also good for jumping back up the stack of cards in

251
00:12:09,563 --> 00:12:13,498
the navigation controller more than one step, okay?

252
00:12:13,500 --> 00:12:15,767
Because it can go back to guys, who presented guys,

253
00:12:15,769 --> 00:12:18,470
who presented guys so it can jump all the way back.

254
00:12:18,472 --> 00:12:20,805
How does it work? Okay, so instead of

255
00:12:20,807 --> 00:12:24,709
Ctrl+dragging to another MVC to set up this segue which is

256
00:12:24,711 --> 00:12:27,545
what you usually do, you actually Ctrl+drag to this

257
00:12:27,547 --> 00:12:30,181
little button at the top. It's kinda reddish.

258
00:12:30,183 --> 00:12:34,185
The Exit button. Okay, so if I have this row in this table

259
00:12:34,187 --> 00:12:37,622
right here and when you click on it, it wants to unwind and

260
00:12:37,624 --> 00:12:41,025
go back to one of the MVCs that presented this MVC,

261
00:12:41,027 --> 00:12:45,163
you just Ctrl+drag up to this little exit. Now when you do

262
00:12:45,165 --> 00:12:49,501
that, it's gonna show you a list of methods that

263
00:12:49,503 --> 00:12:53,805
are implemented by other MVCs in your app, okay? They're

264
00:12:53,807 --> 00:12:57,342
special, and I'll show you what makes them special but

265
00:12:57,344 --> 00:13:00,879
these special things will appear in this list.

266
00:13:00,881 --> 00:13:04,549
And all you do is pick which one you want. Then when you do

267
00:13:04,551 --> 00:13:07,685
the segue, it will start looking up the list of MVC's

268
00:13:07,687 --> 00:13:09,354
that presented you, and the one that presented that, and

269
00:13:09,356 --> 00:13:11,523
the one that presented that until it finds that method.

270
00:13:11,525 --> 00:13:14,359
And it will dismiss all the way back to that one and

271
00:13:14,361 --> 00:13:19,330
call this method, okay? So let me show you some more

272
00:13:19,332 --> 00:13:22,801
pictures to make this a little bit clearer right here.

273
00:13:22,803 --> 00:13:26,104
So this go back method right here, okay,

274
00:13:26,106 --> 00:13:28,306
I want, I connected to exit and

275
00:13:28,308 --> 00:13:28,740
I have to go back.

276
00:13:28,742 --> 00:13:32,110
Go back let's say is in the guy who directly presented me.

277
00:13:32,112 --> 00:13:34,712
He could be farther up the stack but let's say he's right

278
00:13:34,714 --> 00:13:37,282
here. And here's this go back method right here. Now,

279
00:13:37,284 --> 00:13:40,552
what's special about this go back method in this presenter?

280
00:13:40,554 --> 00:13:44,355
Well, one thing is it has to be marked IBAction, okay?

281
00:13:44,357 --> 00:13:47,292
So if it has IBAction. And the second thing is,

282
00:13:47,294 --> 00:13:51,162
the argument has to be a UIStoryboardSegue. So

283
00:13:51,164 --> 00:13:53,731
any method that's, is marked IBAction and

284
00:13:53,733 --> 00:13:57,802
has UIStoryboardSegue as the argument is gonna appear in

285
00:13:57,804 --> 00:14:02,240
this list. Okay, now this IBAction,

286
00:14:02,242 --> 00:14:06,377
once you kind of pick the one you want.

287
00:14:06,379 --> 00:14:09,314
This segue is gonna happen and it's still gonna be a normal

288
00:14:09,316 --> 00:14:10,982
segue and then it's gonna have prepare.

289
00:14:10,984 --> 00:14:13,985
Now the prepare, okay, here's the prepare for segue.

290
00:14:13,987 --> 00:14:17,689
It's going to be in the aah MVC that you wired the exit

291
00:14:17,691 --> 00:14:20,725
button up to, the one on the right here. Okay,

292
00:14:20,727 --> 00:14:23,027
so it lives down in there. And it gets to prepare for

293
00:14:23,029 --> 00:14:26,564
this segue. The segue is gonna come back to this presenter.

294
00:14:26,566 --> 00:14:28,967
So, the destination view controller,

295
00:14:28,969 --> 00:14:33,872
here, is the presenter. The source view controller,

296
00:14:33,874 --> 00:14:34,906
which you haven't seen yet,

297
00:14:34,908 --> 00:14:38,710
in previous segues, is the thing on the right, okay?

298
00:14:38,712 --> 00:14:42,180
The thing it's segueing from. That's the source,

299
00:14:42,182 --> 00:14:46,351
this is the destination, okay? Make sense? And

300
00:14:46,353 --> 00:14:49,220
when this happens, okay, when the segue happens,

301
00:14:49,222 --> 00:14:52,156
you'll be dismissed, right? The source one

302
00:14:52,158 --> 00:14:55,226
will be dismissed. And again, it doesn't just have to

303
00:14:55,228 --> 00:14:57,829
go one level up, it could go up the stack of the navigation

304
00:14:57,831 --> 00:15:00,431
controller things. Or if you had four or five modals in

305
00:15:00,433 --> 00:15:02,634
a row, it could jump all the way back, it's perfectly fine.

306
00:15:02,636 --> 00:15:07,038
It's just whoever implements the method. All right?

307
00:15:07,040 --> 00:15:10,341
Now let's talk another kind of segue, popovers, okay?

308
00:15:10,343 --> 00:15:11,009
You've all seen the popover.

309
00:15:11,011 --> 00:15:13,544
Here's an example of popover here on the right.

310
00:15:13,546 --> 00:15:16,247
This is probably some kind of Search for Appointment to

311
00:15:16,249 --> 00:15:21,486
popover, okay? So this MVC just leaves in here.

312
00:15:21,488 --> 00:15:23,721
And it's being presented modally, okay?

313
00:15:23,723 --> 00:15:26,958
It's just that it presents in a way that looks like this,

314
00:15:26,960 --> 00:15:29,961
like it's in a pop-over. And the popover of course has

315
00:15:29,963 --> 00:15:32,196
a little arrow at the top, a little white arrow,

316
00:15:32,198 --> 00:15:35,767
you can see it, that points to the thing, the UI element that

317
00:15:35,769 --> 00:15:40,405
caused it to pop up. Usually that's a bar button item, but

318
00:15:40,407 --> 00:15:43,341
it could also just be an arbitrary rectangle inside

319
00:15:43,343 --> 00:15:47,712
some view somewhere, okay? This area out here, okay,

320
00:15:47,714 --> 00:15:51,015
everywhere else except for this popover and

321
00:15:51,017 --> 00:15:54,652
the keyboard is grayed out. If you click there,

322
00:15:54,654 --> 00:15:58,556
it will dismiss this popover. So the one difference between

323
00:15:58,558 --> 00:16:02,293
popover and other kinda modal one is that popovers are easy

324
00:16:02,295 --> 00:16:05,964
to dismiss. Just click outside of them, you'll dismiss, so

325
00:16:05,966 --> 00:16:08,633
you don't need a cancel button in a popover or

326
00:16:08,635 --> 00:16:11,502
modal popover. But it's still modal in that obviously you

327
00:16:11,504 --> 00:16:13,738
can't do anything in that grayed out area.

328
00:16:13,740 --> 00:16:16,007
You can only do what this search for

329
00:16:16,009 --> 00:16:18,409
appointment MBC wants to do right now.

330
00:16:18,411 --> 00:16:21,112
Okay, so it's still a modal, it just looks different.

331
00:16:21,114 --> 00:16:26,317
Popover is just a presentation style basically for modal. So

332
00:16:26,319 --> 00:16:29,320
popovers, you think of a popover's kind of like

333
00:16:29,322 --> 00:16:32,824
a navigational controller or split view controller, a tab

334
00:16:32,826 --> 00:16:36,294
bar because it's putting a view controller inside another

335
00:16:36,296 --> 00:16:39,497
another view controller, but it's not. You should think of

336
00:16:39,499 --> 00:16:44,569
popover just as a presentation style. Dial for modal, okay?

337
00:16:44,571 --> 00:16:48,373
So segue into a popover is setup the same way that you

338
00:16:48,375 --> 00:16:51,642
setup a oni modal one, it's just that when you drag over,

339
00:16:51,644 --> 00:16:56,080
you're gonna pick popover instead of modal, okay? When

340
00:16:56,082 --> 00:16:59,350
you're in the storyboard you drag over. Now, an important

341
00:16:59,352 --> 00:17:02,253
thing to note when you prepare for a popover segue,

342
00:17:02,255 --> 00:17:04,455
this is what's different between a popover and

343
00:17:04,457 --> 00:17:10,461
immodal encode, okay? When you prepare all presentations of

344
00:17:10,463 --> 00:17:14,265
any kind of segue are done by a UI presentation controller.

345
00:17:14,267 --> 00:17:17,335
You don't see this, I'm not really talking about this

346
00:17:17,337 --> 00:17:20,071
in this class, it's not really kind of a introductory

347
00:17:20,073 --> 00:17:24,342
material. But, the popover one has a sub class of that called

348
00:17:24,344 --> 00:17:26,244
UI popover presentation controller,

349
00:17:26,246 --> 00:17:27,278
and it's in the thing that knows

350
00:17:27,280 --> 00:17:28,613
how to present it as a popover.

351
00:17:28,615 --> 00:17:31,516
So it's the thing that knows, for example, where to have

352
00:17:31,518 --> 00:17:35,053
the little popover thing point, okay. That's something

353
00:17:35,055 --> 00:17:39,123
that that popover presentation controller knows about. So in

354
00:17:39,125 --> 00:17:42,360
your prepare for segue, you're gonna get this UI popover

355
00:17:42,362 --> 00:17:44,462
presentation controller and I'll show you how to do that.

356
00:17:44,464 --> 00:17:47,398
And you're going to use it to configure how the popover

357
00:17:47,400 --> 00:17:51,869
presents, okay? Now in addition to setting things

358
00:17:51,871 --> 00:17:53,805
like where the popover's arrow can point,

359
00:17:53,807 --> 00:17:57,008
you can also control things like how the popover adapts

360
00:17:57,010 --> 00:18:00,912
to different size classes, okay? And we'll talk about

361
00:18:00,914 --> 00:18:04,615
that in a second too. So here's the prepare for segue,

362
00:18:04,617 --> 00:18:06,384
the prepare for a popover, okay?

363
00:18:06,386 --> 00:18:09,954
All the green, except for what's in this yellow if

364
00:18:09,956 --> 00:18:13,524
statement right here is the same as any other prepare. But

365
00:18:13,526 --> 00:18:14,592
when we get down to the bottom here,

366
00:18:14,594 --> 00:18:17,295
we're gonna get that popover presentation controller by

367
00:18:17,297 --> 00:18:20,698
asking the view controller that we're putting up modally.

368
00:18:20,700 --> 00:18:24,402
Please give me your popover presentation controller,

369
00:18:24,404 --> 00:18:27,271
okay? So that view controller has the popover presentation

370
00:18:27,273 --> 00:18:30,475
going. We get it. Once we have it, we can do things like

371
00:18:30,477 --> 00:18:33,044
configure it like the permitted arrow directions.

372
00:18:33,046 --> 00:18:35,980
Which direction we want the arrow to be? We can also

373
00:18:35,982 --> 00:18:40,118
specify things like where the arrows are pointing,

374
00:18:40,120 --> 00:18:40,852
all that kind of stuff.

375
00:18:40,854 --> 00:18:44,021
Okay, everything you would imagine a popover needs to be

376
00:18:44,023 --> 00:18:47,158
configured with. All right, now also importantly,

377
00:18:47,160 --> 00:18:51,863
we can set that presentation controllers delegate, okay?

378
00:18:51,865 --> 00:18:54,365
And with that delegate we control a little bit more

379
00:18:54,367 --> 00:18:56,701
about how the popover works. So let's talk about that.

380
00:18:56,703 --> 00:19:00,004
What can we do with the delegate? One thing we can do

381
00:19:00,006 --> 00:19:04,942
is find out when that popover was dismissed, okay? So

382
00:19:04,944 --> 00:19:06,144
the delegate will be sent this message,

383
00:19:06,146 --> 00:19:08,946
popoverPresentationController- DidDismissPopover.

384
00:19:08,948 --> 00:19:11,782
Did dismiss popover. Okay, so that's nice to be able to

385
00:19:11,784 --> 00:19:14,919
know when that popover was dismissed. Another thing is we

386
00:19:14,921 --> 00:19:18,623
can control the adaptation behavior when we're in

387
00:19:18,625 --> 00:19:22,193
different size classes like horizontally compact,

388
00:19:22,195 --> 00:19:25,029
okay? So when a popover comes up, as you can

389
00:19:25,031 --> 00:19:28,032
imagine, maybe it wouldn't fit in a horizontally compact

390
00:19:28,034 --> 00:19:30,535
environment unless it's kind of the small popover.

391
00:19:30,537 --> 00:19:34,839
So by default, the system adapts to full screen.

392
00:19:34,841 --> 00:19:37,642
So if you have a popover segue and it's on horizontally

393
00:19:37,644 --> 00:19:41,812
compact, it gets changed to modal full screen. So it'll

394
00:19:41,814 --> 00:19:44,182
take over the whole screen, slide up from the bottom.

395
00:19:44,184 --> 00:19:46,751
Okay, now you might now want that. Maybe it is a small

396
00:19:46,753 --> 00:19:49,687
little popover and you do want it to be a pop over on iPhone

397
00:19:49,689 --> 00:19:52,590
and you can control that. And here's how you do that.

398
00:19:52,592 --> 00:19:55,526
There is a method. Okay, this is a popover. This is actually

399
00:19:55,528 --> 00:19:59,397
a presentation controller delegate method. And

400
00:19:59,399 --> 00:20:01,832
you can see it just sends you the controller here and

401
00:20:01,834 --> 00:20:05,903
a traitCollection. So that's the size class is right here

402
00:20:05,905 --> 00:20:07,905
and you're gonna return a presentation style.

403
00:20:07,907 --> 00:20:10,975
Now, if you don't implement this delegation method, then

404
00:20:10,977 --> 00:20:14,278
in horizontally compact, it returns full screen otherwise,

405
00:20:14,280 --> 00:20:16,714
it returns whatever it was setup in the storyboard,

406
00:20:16,716 --> 00:20:19,217
popover or form sheet or whatever. But

407
00:20:19,219 --> 00:20:21,919
if you do implement it, you could return for example UI

408
00:20:21,921 --> 00:20:25,823
modal presentation style none which means don't adapt.

409
00:20:25,825 --> 00:20:29,093
This is asking for, how do I adapt to this trait

410
00:20:29,095 --> 00:20:31,796
collection. If you say none, that means don't adapt.

411
00:20:31,798 --> 00:20:34,031
Just do the same thing on every single platform.

412
00:20:34,033 --> 00:20:37,068
Okay, and so if you do this, then your popover will appear

413
00:20:37,070 --> 00:20:40,071
as a popover on your iPhone. Look just like on an iPad but

414
00:20:40,073 --> 00:20:43,140
it better be small coz it didn't have a lot of room.

415
00:20:43,142 --> 00:20:47,178
So this is how you can control that adaptation behavior,

416
00:20:47,180 --> 00:20:49,747
okay. But here's a problem, let's say you

417
00:20:49,749 --> 00:20:52,316
do that, okay, let's say you don't do that. Let's say

418
00:20:52,318 --> 00:20:54,885
the popover is too big and it comes up full screen,

419
00:20:54,887 --> 00:20:59,624
how do you dismiss that popover, okay? Because it used

420
00:20:59,626 --> 00:21:01,592
to be a popover I could click somewhere else and

421
00:21:01,594 --> 00:21:03,494
it will disappear. But now it's full screen.

422
00:21:03,496 --> 00:21:06,464
I can't click anywhere else. How do I dismiss it? Okay,

423
00:21:06,466 --> 00:21:08,599
that's a problem. What would be really cool,

424
00:21:08,601 --> 00:21:11,335
is if you could put it inside a navigation controller and

425
00:21:11,337 --> 00:21:15,740
then add a little done button, right at the top? And

426
00:21:15,742 --> 00:21:18,242
this method is how you do that. So, if you implement

427
00:21:18,244 --> 00:21:20,911
the delegate of the popover presentation controller, and

428
00:21:20,913 --> 00:21:22,713
you implement this thing, view controller for

429
00:21:22,715 --> 00:21:25,650
adapter presentation style, it allows you to return

430
00:21:25,652 --> 00:21:30,655
a different view controller to present. For example,

431
00:21:30,657 --> 00:21:33,057
you might, preser, present, return a navigation

432
00:21:33,059 --> 00:21:36,994
controller. Whose visible view controller is, the actual view

433
00:21:36,996 --> 00:21:39,897
controller that was inside the popover, you see. And

434
00:21:39,899 --> 00:21:42,633
you could add a done button to it or whatever you want. So

435
00:21:42,635 --> 00:21:44,435
here you can return, if you return nil here

436
00:21:44,437 --> 00:21:47,338
it's going to just return the thing that was inside,

437
00:21:47,340 --> 00:21:48,339
gonna be inside the popover.

438
00:21:48,341 --> 00:21:50,374
But if you return the navigation controller or

439
00:21:50,376 --> 00:21:53,311
whatever, it'll put that up In the modal adapted. And this is

440
00:21:53,313 --> 00:21:56,280
only happening in the adapted case, right? View control for

441
00:21:56,282 --> 00:22:01,652
adapted presentation style, okay? All right,

442
00:22:01,654 --> 00:22:04,789
very important issue about popover is its size, okay?

443
00:22:04,791 --> 00:22:07,625
iOS implements its size in a very object-jointed way,

444
00:22:07,627 --> 00:22:10,828
which is that when you have an MVC that's gonna be put up as

445
00:22:10,830 --> 00:22:14,131
a popover, the system asks that MVC what size would

446
00:22:14,133 --> 00:22:15,466
you prefer it to be?

447
00:22:15,468 --> 00:22:18,102
Okay, because that MVC obviously knows what the best

448
00:22:18,104 --> 00:22:22,139
size for it to be is, and it does that via this var

449
00:22:22,141 --> 00:22:25,643
preferredContentSize is a CGSize and you can either

450
00:22:25,645 --> 00:22:29,947
set this preferredContectSize. The MVC can set its

451
00:22:29,949 --> 00:22:32,550
own preferredContectSize to something reasonable or

452
00:22:32,552 --> 00:22:34,652
you could actually even override it. And

453
00:22:34,654 --> 00:22:38,789
have it return its correct size, its prefered size.

454
00:22:38,791 --> 00:22:42,059
It's called preferred by the way because, obviously

455
00:22:42,061 --> 00:22:44,395
the system will try to fit it on screen but if, for

456
00:22:44,397 --> 00:22:47,298
example, it's on horizontally compact and the adaptive thing

457
00:22:47,300 --> 00:22:49,734
is turned off then it might have to jam it in there,

458
00:22:49,736 --> 00:22:51,769
it might have to be a little smaller than preferred wants

459
00:22:51,771 --> 00:22:55,973
it to be, kay? So this is not guaranteed to be this size,

460
00:22:55,975 --> 00:23:00,878
this size is preferred. Okay, the last segue I'm gonna talk

461
00:23:00,880 --> 00:23:03,781
about is embed segues, okay? These are really,

462
00:23:03,783 --> 00:23:07,785
really cool segues. Basically you could take an MVC,

463
00:23:07,787 --> 00:23:10,321
take its view, you know, the top level view, and

464
00:23:10,323 --> 00:23:14,225
put it as a view inside the view hierarchy of another MVC.

465
00:23:14,227 --> 00:23:17,061
Okay it'll look just a view in another MVC, it's just that,

466
00:23:17,063 --> 00:23:19,130
it's completely controlled by an MVC,

467
00:23:19,132 --> 00:23:21,699
okay? Really cool that's why it's called embedded.

468
00:23:21,701 --> 00:23:24,301
You're embedding an MVC inside of another one.

469
00:23:24,303 --> 00:23:25,736
Xcode makes it really easy to do this.

470
00:23:25,738 --> 00:23:30,174
Just go down to your little object pallet down there where

471
00:23:30,176 --> 00:23:31,809
you get your buttons and stuff. And look for

472
00:23:31,811 --> 00:23:35,646
container view and drag that into the place that you want

473
00:23:35,648 --> 00:23:38,215
this thing to be embedded. It will look just like a view,

474
00:23:38,217 --> 00:23:40,184
you can do auto layout constraints on it.

475
00:23:40,186 --> 00:23:42,653
You can put it as a sub-view of anything else you want.

476
00:23:42,655 --> 00:23:45,656
It's just a view, okay. And when you do it,

477
00:23:45,658 --> 00:23:50,060
you're gonna see this kind of cool look where it puts what

478
00:23:50,062 --> 00:23:51,529
looks like a Segue way thing.

479
00:23:51,531 --> 00:23:53,998
Okay, here's the thing in the container, what I dragged out.

480
00:23:54,000 --> 00:23:57,535
This segue right here and here's the NVC. Okay so

481
00:23:57,537 --> 00:24:00,905
here's the normal NVC like in your storyboard anywhere else,

482
00:24:00,907 --> 00:24:03,874
and it's got this little segue here, so kinda seem like

483
00:24:03,876 --> 00:24:06,177
a segue and it is in the sense kinda segue to it.

484
00:24:06,179 --> 00:24:09,380
It's just that instead of doing it modelly or something

485
00:24:09,382 --> 00:24:12,383
that, it's just going to put its view right in here.

486
00:24:12,385 --> 00:24:16,320
Okay, make sense and you can prepare for that segue,

487
00:24:16,322 --> 00:24:20,224
it's a perfectly normal segue. One thing to be careful

488
00:24:20,226 --> 00:24:22,660
about this though is the View Loading Timing.

489
00:24:22,662 --> 00:24:24,662
Remember that when you're in prepare for segue,

490
00:24:24,664 --> 00:24:27,431
none of the outlets of the MVC are set. And that's true with

491
00:24:27,433 --> 00:24:30,067
embed as well, all right? So might have this embed segue,

492
00:24:30,069 --> 00:24:33,003
has all this cool UI but none of its outlets are set up. So

493
00:24:33,005 --> 00:24:35,606
a lot of times in the embed, when you're preparing for

494
00:24:35,608 --> 00:24:38,509
an embed segue, you're just grabbing the MVC and

495
00:24:38,511 --> 00:24:40,377
holding onto it with a pointer. And

496
00:24:40,379 --> 00:24:42,613
then later like in your own viewDidLoad,

497
00:24:42,615 --> 00:24:46,283
okay your MVC will be loaded by then, then you can go and

498
00:24:46,285 --> 00:24:49,153
set whatever you want to the embayed, the embedded thing to

499
00:24:49,155 --> 00:24:52,189
look like okay. So just be careful of that.

500
00:24:52,191 --> 00:24:55,259
It's just standard thing here that prepare for

501
00:24:55,261 --> 00:24:59,230
segue outlets aren't set in the destination MVC but for

502
00:24:59,232 --> 00:25:02,566
embed it comes, it's even more obvious, kinda,

503
00:25:02,568 --> 00:25:07,571
it bites you more often. Okay, so that's segues. Okay,

504
00:25:07,573 --> 00:25:10,741
that's all the segues there are. Okay, Ben, now you can

505
00:25:10,743 --> 00:25:14,011
cover. Yeah, question? >> So, so in, in that segues,

506
00:25:14,013 --> 00:25:16,814
if you have an existing view controller,

507
00:25:16,816 --> 00:25:18,816
can you connect into the inside or

508
00:25:18,818 --> 00:25:21,852
does it have to look funny like, you know?

509
00:25:21,854 --> 00:25:22,887
>> Yeah so the question is can

510
00:25:22,889 --> 00:25:26,190
I connect just a regular mvc from somewhere like maybe my

511
00:25:26,192 --> 00:25:29,059
Cassini image view controller for example. It's just

512
00:25:29,061 --> 00:25:31,328
sitting around there. Could I embed it? And the answer is

513
00:25:31,330 --> 00:25:35,199
yes you can. Okay the mvc has embedded nothing special about

514
00:25:35,201 --> 00:25:39,803
it whatsoever okay it can be embedded just as easily.

515
00:25:40,206 --> 00:25:43,774
All right. Core Location is my next topic.

516
00:25:43,776 --> 00:25:45,309
Okay we're done with segues now we're moving on to

517
00:25:45,311 --> 00:25:49,413
Core Location and map kit here. So Core Location and map

518
00:25:49,415 --> 00:25:53,417
kit are really two part pieces of the same puzzle here.

519
00:25:53,419 --> 00:25:57,121
Core Location is the non-UI way to find out about your

520
00:25:57,123 --> 00:26:01,258
location. Okay? And then map kit is the bunch of UI to show

521
00:26:01,260 --> 00:26:04,028
your location on maps and stuff. So when you talk about

522
00:26:04,030 --> 00:26:06,297
correlation first because it has a lot of the intrinsic

523
00:26:06,299 --> 00:26:09,099
stuff that you need to understand the map kit stuff.

524
00:26:09,101 --> 00:26:13,537
All right. The basic object in core location is called

525
00:26:13,539 --> 00:26:17,641
a CLLocation. Core location, location. CLLocation has

526
00:26:17,643 --> 00:26:21,145
the coordinate latitude and longitude, altitude,

527
00:26:21,147 --> 00:26:24,481
the horizontal and vertical accuracy of this location,

528
00:26:24,483 --> 00:26:27,551
because sometimes depending on how you got this location,

529
00:26:27,553 --> 00:26:28,552
it might be highly accurate,

530
00:26:28,554 --> 00:26:29,887
you know, within a meter or so, or

531
00:26:29,889 --> 00:26:32,222
might be very inaccurate, maybe it's a kilometer.

532
00:26:32,224 --> 00:26:35,459
Okay? Timestamp, when was this thing was taken, you'll see

533
00:26:35,461 --> 00:26:39,029
that that's really important. A speed if the system detected

534
00:26:39,031 --> 00:26:42,266
that you were moving at this time that this thing was

535
00:26:42,268 --> 00:26:45,970
taken, and a course will tell you what direction you were

536
00:26:45,972 --> 00:26:50,007
headed in if it detects that you were moving at this point.

537
00:26:50,009 --> 00:26:55,179
So that's the basic collection of stuff is in CLLocation.

538
00:26:55,181 --> 00:26:58,248
The CL, coordinate, this coordinate thing right here is

539
00:26:58,250 --> 00:27:02,019
a CLLocationCOordinate2D which is just a latitude and

540
00:27:02,021 --> 00:27:03,253
a longitude struct.

541
00:27:03,255 --> 00:27:06,023
The altitude is a CLLocationDistance,

542
00:27:06,025 --> 00:27:10,594
which is meters. Okay? Now let's talk about

543
00:27:10,596 --> 00:27:14,932
the accuracy thing, okay? When you are asking for

544
00:27:14,934 --> 00:27:18,302
a location and when you get a location, in both cases,

545
00:27:18,304 --> 00:27:20,471
you're gonna specify an accuracy, okay?

546
00:27:20,473 --> 00:27:23,240
Specifying the accuracy is going to determine what

547
00:27:23,242 --> 00:27:25,976
mechanism your device uses to get the accuracy. And

548
00:27:25,978 --> 00:27:29,380
then when you get the accuracy back It tells you, kind of,

549
00:27:29,382 --> 00:27:32,416
how it got it, somewhat. Okay, so, we're a little bit

550
00:27:32,418 --> 00:27:35,486
abstracting the hardware away from the concept of

551
00:27:35,488 --> 00:27:38,889
an accurate measurement of location. Here

552
00:27:38,891 --> 00:27:41,892
are the different accuracies that it can have here,

553
00:27:41,894 --> 00:27:42,393
best for navigation,

554
00:27:42,395 --> 00:27:45,129
best nearest ten meters, hundred meters, kilometer,

555
00:27:45,131 --> 00:27:49,266
or three kilometers and as you can imagine best for

556
00:27:49,268 --> 00:27:51,535
navigation. It's really really really really accurate.

557
00:27:51,537 --> 00:27:55,639
It's also really really really uses a lot of battery, okay.

558
00:27:55,641 --> 00:27:58,809
And basically you can almost rename these things as

559
00:27:58,811 --> 00:27:59,810
lots of battery usage,

560
00:27:59,812 --> 00:28:02,813
a little bit less, medium battery usage, not so

561
00:28:02,815 --> 00:28:05,883
much battery usage, very very battery efficient by the time

562
00:28:05,885 --> 00:28:09,453
you get to the bottom. Okay? It's really batteries are big

563
00:28:09,455 --> 00:28:12,322
deal when it comes to getting your location. Now,

564
00:28:12,324 --> 00:28:15,926
how does the system get these different accuracy locations?

565
00:28:15,928 --> 00:28:19,129
Well, there's three different ways really at least for

566
00:28:19,131 --> 00:28:21,331
now that the system could get location and

567
00:28:21,333 --> 00:28:23,333
you don't know which one is using. Okay,

568
00:28:23,335 --> 00:28:25,836
all you get to do is specify the accuracy you want and

569
00:28:25,838 --> 00:28:28,472
it will get the locations as best it can and re-tell you

570
00:28:28,474 --> 00:28:32,710
what accuracy it got. But the three ways it knows how to do

571
00:28:32,712 --> 00:28:37,981
are GPS which is very accurate and uses a lot of power.

572
00:28:37,983 --> 00:28:42,519
Okay, then there's WiFi nodes. Believe it or not your phone

573
00:28:42,521 --> 00:28:45,689
can, as you walk around, see what WiFi nodes are around.

574
00:28:45,691 --> 00:28:48,358
It's got a huge database on the network of all the WiFi

575
00:28:48,360 --> 00:28:50,828
nodes and where they are. And so based on which ones

576
00:28:50,830 --> 00:28:54,031
are close to you, which ones you're getting good signal,

577
00:28:54,033 --> 00:28:56,266
it can figure our generally where you are.

578
00:28:56,268 --> 00:28:57,701
Which is kind of a cool feature, right?

579
00:28:57,703 --> 00:29:00,571
Pretty low power, WiFi is fairly low power not as

580
00:29:00,573 --> 00:29:04,074
low-power as cellular towers which is the next one, and,

581
00:29:04,076 --> 00:29:07,544
but certainly a lot less power than doing GPS. And so,

582
00:29:07,546 --> 00:29:10,380
it can find, you know, these kind of medium accuracies

583
00:29:10,382 --> 00:29:12,616
by doing that. And in fact, if you walk around at Stanford,

584
00:29:12,618 --> 00:29:15,352
it can be very accurate because there's an incredible

585
00:29:15,354 --> 00:29:17,688
number of WiFi nodes around Stanford campus. You

586
00:29:17,690 --> 00:29:20,758
are probably in range of 50 of them at almost given time.

587
00:29:20,760 --> 00:29:23,761
Certainly 20 so, we pretty much know almost exactly where

588
00:29:23,763 --> 00:29:27,297
you are. And then last one is cell tower triangulation. So

589
00:29:27,299 --> 00:29:30,134
same way with the WiFi nodes it can look around to the cell

590
00:29:30,136 --> 00:29:33,403
towers. Now there's fewer cell towers than there are WiFi

591
00:29:33,405 --> 00:29:36,073
nodes okay, and they tend to be farther away from you.

592
00:29:36,075 --> 00:29:39,843
Okay, so triangulating them is a little more iffy okay.

593
00:29:39,845 --> 00:29:41,211
And sometimes there's not one for

594
00:29:41,213 --> 00:29:44,748
very very far distance from you, a kilometer or more. So

595
00:29:44,750 --> 00:29:47,417
that's why you start getting these really low accuracies

596
00:29:47,419 --> 00:29:51,355
out here but the cellular radio is incredibly low power.

597
00:29:51,357 --> 00:29:53,323
Super super low power, okay. And

598
00:29:53,325 --> 00:29:56,460
your cellular radio is also automatically being turned on

599
00:29:56,462 --> 00:29:58,896
and off and used as, you know you walk around and

600
00:29:58,898 --> 00:30:01,565
you're making phone calls, or receiving phone calls etc. So

601
00:30:01,567 --> 00:30:03,934
the cellular infrastructure's very low power but

602
00:30:03,936 --> 00:30:08,939
low accuracy. Okay? Got all of that? All right

603
00:30:08,941 --> 00:30:10,974
there's other things you can find out in the core location,

604
00:30:10,976 --> 00:30:13,377
your speed, your course, that timestamp.

605
00:30:13,379 --> 00:30:16,113
The reason the time stamp is important is that there

606
00:30:16,115 --> 00:30:18,115
are a lot of ways to ask the system to give you

607
00:30:18,117 --> 00:30:21,051
CLLocations, not in real time. In other words it's not going

608
00:30:21,053 --> 00:30:23,554
to give you the location right now. Like you might be going

609
00:30:23,556 --> 00:30:25,789
out for a run and you put your phone in your pocket and

610
00:30:25,791 --> 00:30:28,559
it goes to sleep it can still collect locations. And

611
00:30:28,561 --> 00:30:31,562
then when it wake back up it will send them all to you. And

612
00:30:31,564 --> 00:30:33,997
when it does you're going to want to know the timestamps so

613
00:30:33,999 --> 00:30:35,065
you knew where you were at the time.

614
00:30:35,067 --> 00:30:39,002
So time stamp is an important part of the CLLocation.

615
00:30:39,004 --> 00:30:42,339
All right. So how do we get a CLLocation? Well, you get it

616
00:30:42,341 --> 00:30:45,676
from a CLLocationManager usually. Just like we had

617
00:30:45,678 --> 00:30:47,611
a core motion, we have the CM motion manager. Well,

618
00:30:47,613 --> 00:30:51,381
in the core location, we have the CLLocationManager. And

619
00:30:51,383 --> 00:30:53,917
it has a delegate that's going to generally give you,

620
00:30:53,919 --> 00:30:57,387
locations. What's really cool about it is you can actually

621
00:30:57,389 --> 00:31:00,490
test in the simulator by simulating yourself being in

622
00:31:00,492 --> 00:31:03,227
different locations. If you go down near the debugger bar,

623
00:31:03,229 --> 00:31:06,830
there's a little guy there and that you can even upload

624
00:31:06,832 --> 00:31:09,333
with the GPX file. The GPX file is just

625
00:31:09,335 --> 00:31:11,235
a file with a bunch of waypoints in it, okay.

626
00:31:11,237 --> 00:31:14,438
GPS locations can have other stuff in there like actually

627
00:31:14,440 --> 00:31:17,875
URLs for photos taken at the location, stuff like that. But

628
00:31:17,877 --> 00:31:20,510
it can have these location you can upload it and

629
00:31:20,512 --> 00:31:25,782
have whatever testing you want in here okay. So

630
00:31:25,784 --> 00:31:26,250
the CLLocationManager.

631
00:31:26,252 --> 00:31:29,086
How do you use it? Similar to the CMMotion manager. First

632
00:31:29,088 --> 00:31:31,722
you're going to check like to see what hardware's available.

633
00:31:31,724 --> 00:31:34,858
Okay and then you're going to create a CLLocationManager and

634
00:31:34,860 --> 00:31:37,628
set as delegate so that you can receive updates.

635
00:31:37,630 --> 00:31:41,198
Then you're going to configure the manager to say what kind

636
00:31:41,200 --> 00:31:43,934
of location you want. And we'll talk about what that

637
00:31:43,936 --> 00:31:45,836
means and then you're going to start it going.

638
00:31:45,838 --> 00:31:49,006
And once you start it going it's going to start sending

639
00:31:49,008 --> 00:31:52,042
your locations based on how you, what you asked for,

640
00:31:52,044 --> 00:31:55,112
all right. How, what kind of location monitoring is

641
00:31:55,114 --> 00:31:58,515
available in the system? Well one is accuracy based

642
00:31:58,517 --> 00:32:02,452
continual updates. This is what you would normally think.

643
00:32:02,454 --> 00:32:04,988
You set an accuracy that you want. Okay, I want

644
00:32:04,990 --> 00:32:08,525
highly accurate best for navigation or low accuracy and

645
00:32:08,527 --> 00:32:11,395
the system will start sending you locations based on that

646
00:32:11,397 --> 00:32:13,630
accuracy. So if you ask for best for navigation it's

647
00:32:13,632 --> 00:32:15,265
gonna be sending you locations all the time and

648
00:32:15,267 --> 00:32:17,701
they're gonna be highly accurate. If you ask for

649
00:32:17,703 --> 00:32:19,569
every three kilometers. You could walk for

650
00:32:19,571 --> 00:32:22,205
20 minutes before it sends you another location because it

651
00:32:22,207 --> 00:32:25,742
notices another cell tower and can figure out its location.

652
00:32:25,744 --> 00:32:30,480
Okay? So that's one way to do it. Another way is you can

653
00:32:30,482 --> 00:32:34,084
get notified only when a significant location change

654
00:32:34,086 --> 00:32:37,321
happens, okay. This is basically, I'm not talking

655
00:32:37,323 --> 00:32:40,190
about how it's implemented here but I kinda am.

656
00:32:40,192 --> 00:32:44,594
But it's basically when it sees a new cell tower. Okay.

657
00:32:44,596 --> 00:32:47,931
So that's a significant enough change that it'll probably

658
00:32:47,933 --> 00:32:48,098
send you one. So

659
00:32:48,100 --> 00:32:54,237
this is not highly accurate locations necessarily. Okay.

660
00:32:54,239 --> 00:32:57,441
The other one is region based updates so you can define

661
00:32:57,443 --> 00:33:01,979
these regions either little circular areas in the world or

662
00:33:01,981 --> 00:33:06,083
even where beacons live. Okay? Little bluetooth beacons and

663
00:33:06,085 --> 00:33:09,252
you can get notified when you get close to that beacon or

664
00:33:09,254 --> 00:33:10,387
you get real close to the beacon or

665
00:33:10,389 --> 00:33:14,157
when you walk inside the circular area. Okay? And

666
00:33:14,159 --> 00:33:16,360
then you also can have your heading monitored if

667
00:33:16,362 --> 00:33:20,497
you change direction, it can send you a new location.

668
00:33:20,799 --> 00:33:23,133
All right, so let's talk about how we use CLO,

669
00:33:23,135 --> 00:33:26,036
CL location manager, and then we'll talk about how to make

670
00:33:26,038 --> 00:33:28,672
each of those things work. First we want to find out what

671
00:33:28,674 --> 00:33:32,376
our, hardware can do. One of the most important things

672
00:33:32,378 --> 00:33:35,846
to find out about hardware is whether you're authorized to

673
00:33:35,848 --> 00:33:38,982
get the user's location. As you can imagine, users might

674
00:33:38,984 --> 00:33:41,518
not want you to know where they are, tracking their every

675
00:33:41,520 --> 00:33:45,188
move out there. It's kind of a sensitive subject, okay. So

676
00:33:45,190 --> 00:33:48,658
you have to make sure you're authorized to receive it.

677
00:33:48,660 --> 00:33:52,029
And you can do this with these various things I'll talk about

678
00:33:52,031 --> 00:33:52,129
authorization, on the next page. By the way, anytime you

679
00:33:52,131 --> 00:33:54,831
in detail,

680
00:33:54,833 --> 00:33:57,234
have an authorization status of any kind, not just for

681
00:33:57,236 --> 00:34:00,737
location, you notice there's the states Authorized, Denied,

682
00:34:00,739 --> 00:34:04,641
or Restricted. What Restricted means right there is,

683
00:34:04,643 --> 00:34:08,045
it's denied, and the user can't change it.

684
00:34:08,047 --> 00:34:11,615
So don't put up an alert that says, you, I'm not authorized

685
00:34:11,617 --> 00:34:14,918
to get your location. Please go to Settings and change it.

686
00:34:14,920 --> 00:34:16,820
Okay because they're not allowed to. There are ways

687
00:34:16,822 --> 00:34:19,723
in enterprises inside companies where companies can

688
00:34:19,725 --> 00:34:23,193
configure the phones of their employees. So for example,

689
00:34:23,195 --> 00:34:26,396
they can't do this location service or other services.

690
00:34:26,398 --> 00:34:28,331
Okay so be careful about the restricted state.

691
00:34:28,333 --> 00:34:32,102
It's restricted just accept the fact you can't do it.

692
00:34:32,104 --> 00:34:35,272
All right. And then you can also check for certain

693
00:34:35,274 --> 00:34:38,308
kinds of monitoring like can you monitor for beacons or

694
00:34:38,310 --> 00:34:41,778
can you monitor for circular regions? Most new hardware can

695
00:34:41,780 --> 00:34:44,548
do all of these stuff or if you have an older phone maybe

696
00:34:44,550 --> 00:34:47,617
it doesn't have the same capabilities to do that.

697
00:34:47,619 --> 00:34:50,387
Alright? So let's talk about

698
00:34:50,389 --> 00:34:52,255
this authorization piece though because it is

699
00:34:52,257 --> 00:34:54,458
very important interesting piece to do it.

700
00:34:54,460 --> 00:34:57,160
There's couple of steps you have to do to make it work.

701
00:34:57,162 --> 00:35:00,797
One is you have to request authorization, okay.

702
00:35:00,799 --> 00:35:03,400
This is ASynchronous, okay. You send this to the CL

703
00:35:03,402 --> 00:35:06,336
location manager and you're gonna request one of

704
00:35:06,338 --> 00:35:08,371
these two different kinds of authorizations.

705
00:35:08,373 --> 00:35:11,842
In Use Authorization or Always Authorization. So

706
00:35:11,844 --> 00:35:14,578
InUseAuthorization means you only wanna be allowed to

707
00:35:14,580 --> 00:35:18,148
get the location when it's the foreground app the user is

708
00:35:18,150 --> 00:35:20,784
using. Okay? When the user is in the background or

709
00:35:20,786 --> 00:35:22,652
anything else, you can't find this location.

710
00:35:22,654 --> 00:35:24,287
Users are fairly comfortable with that level

711
00:35:24,289 --> 00:35:26,756
of authorization cuz they know when you're getting their,

712
00:35:26,758 --> 00:35:29,860
their location. AlwaysAuthorization is you can

713
00:35:29,862 --> 00:35:32,429
get their location anytime even the background and

714
00:35:32,431 --> 00:35:35,999
that's very invasive of their privacy. So

715
00:35:36,001 --> 00:35:39,736
you know a lot of people, users won't do this.

716
00:35:39,738 --> 00:35:42,672
They won't give you that authorization, okay? So

717
00:35:42,674 --> 00:35:45,809
the system might be putting up an alert asking the user if

718
00:35:45,811 --> 00:35:48,912
it's okay, they're checking in their settings to see what

719
00:35:48,914 --> 00:35:51,781
settings are there, things like that to find so

720
00:35:51,783 --> 00:35:54,651
that's what its asynchronous. Eventually a delegate method

721
00:35:54,653 --> 00:35:56,520
will be called in your CL location saying,

722
00:35:56,522 --> 00:35:58,054
okay, here's your authorization task.

723
00:35:58,056 --> 00:36:01,925
It was denied or it was accept, it was allowed. Okay?

724
00:36:01,927 --> 00:36:05,729
Now, when you go off to request this authorization,

725
00:36:05,731 --> 00:36:09,766
you have to have the user in their setting,

726
00:36:09,768 --> 00:36:10,433
if they go into settings and

727
00:36:10,435 --> 00:36:13,370
look at location services, your app will be there,

728
00:36:13,372 --> 00:36:15,739
there has to be a switch they can click that says,

729
00:36:15,741 --> 00:36:20,644
yes I'll allow my, this app to have always authorization or

730
00:36:20,646 --> 00:36:25,448
in use authorization. To put that UI in the settings,

731
00:36:25,450 --> 00:36:28,752
you have to put something in your info P list. Okay?

732
00:36:28,754 --> 00:36:31,388
Which is this key right here NSLocation when

733
00:36:31,390 --> 00:36:32,789
in use description or

734
00:36:32,791 --> 00:36:35,492
NSLocation always use a description. This is a string

735
00:36:35,494 --> 00:36:41,231
explaining why you want this particular authorization.

736
00:36:41,233 --> 00:36:45,235
And if this key exists then, in settings,

737
00:36:45,237 --> 00:36:47,837
the user will be able to have a switch to turn this on or

738
00:36:47,839 --> 00:36:51,007
off. So if you don't put these in here, these things on top,

739
00:36:51,009 --> 00:36:54,344
these funcs will always fail. Because there's no way for

740
00:36:54,346 --> 00:36:56,479
the user to set that in their settings, so

741
00:36:56,481 --> 00:36:58,882
they'll all just always fail. Okay? And

742
00:36:58,884 --> 00:37:02,118
the system can't put up an alert even asking if it's okay

743
00:37:02,120 --> 00:37:03,920
because if they said yes there's no way,

744
00:37:03,922 --> 00:37:06,189
there's no switch for the system to turn on.

745
00:37:06,191 --> 00:37:07,891
So you'd just be always denied, so

746
00:37:07,893 --> 00:37:13,296
you need these two steps to get authorization. All right.

747
00:37:13,298 --> 00:37:17,167
Now, how do you then get the CL location from the location

748
00:37:17,169 --> 00:37:19,002
manager? Of course you can pull, but

749
00:37:19,004 --> 00:37:21,705
like with motion manager we say that's not a good idea.

750
00:37:21,707 --> 00:37:24,341
But what you can do you can just ask the location manager

751
00:37:24,343 --> 00:37:25,075
please give me the current location. And

752
00:37:25,077 --> 00:37:28,178
it will give you the location with whatever accuracy it has.

753
00:37:28,180 --> 00:37:31,648
Okay but really the way we do it is we set this var

754
00:37:31,650 --> 00:37:34,384
in the location manager called desired accuracy.

755
00:37:34,386 --> 00:37:36,620
That's one of those accuracies like best for navigation and

756
00:37:36,622 --> 00:37:39,723
all those things. And then also a distance filter which

757
00:37:39,725 --> 00:37:43,360
is how far the user has to move before we're gonna give

758
00:37:43,362 --> 00:37:46,863
a new location. Okay? So, if you take ten meters,

759
00:37:46,865 --> 00:37:50,033
you just gotta walk ten meters down the way before another

760
00:37:50,035 --> 00:37:50,867
location will come. And

761
00:37:50,869 --> 00:37:53,970
those two things together will give the system a good idea of

762
00:37:53,972 --> 00:37:57,807
how hard it has to work to get the users location. Okay. So

763
00:37:57,809 --> 00:38:01,611
you set those and then you say start updating the location.

764
00:38:01,613 --> 00:38:04,481
And as soon as you say start updating location, as long as

765
00:38:04,483 --> 00:38:07,250
you've set these, you're going to start getting locations

766
00:38:07,252 --> 00:38:11,588
appropriate to these settings up here. Now, be sure,

767
00:38:11,590 --> 00:38:12,455
just like with the motion manager,

768
00:38:12,457 --> 00:38:14,924
in fact even more importantly than the motion manager,

769
00:38:14,926 --> 00:38:17,627
to stop them when you're not gonna do anything with

770
00:38:17,629 --> 00:38:20,430
the results. If locations are coming, and you're ignoring

771
00:38:20,432 --> 00:38:23,967
them, you should have stopped it because this is basically

772
00:38:23,969 --> 00:38:26,102
turn on battery save. [LAUGH] Okay. If you turn, turn,

773
00:38:26,104 --> 00:38:29,072
if you don't stop updating location and

774
00:38:29,074 --> 00:38:31,141
you're not using it, you're just draining your battery for

775
00:38:31,143 --> 00:38:33,043
nothing, it's probably the number one way to drain

776
00:38:33,045 --> 00:38:37,480
their battery, actually. Okay. And you people will rapidly,

777
00:38:37,482 --> 00:38:40,550
you'll get it on your app store thing on the comments

778
00:38:40,552 --> 00:38:42,886
it'll say drained your battery don't buy this thing.

779
00:38:42,888 --> 00:38:46,890
Okay? So you want to be really careful not to do that. Okay.

780
00:38:46,892 --> 00:38:50,160
So once you turn it on you're gonna start getting this

781
00:38:50,162 --> 00:38:54,698
delegate method sent to you. Did update locations is plural

782
00:38:54,700 --> 00:38:56,333
which in a, within array of locations.

783
00:38:56,335 --> 00:38:58,535
Now, why is that an array of locations instead of

784
00:38:58,537 --> 00:39:00,170
just sending you each location one by one.

785
00:39:00,172 --> 00:39:03,073
Well, it's that running example, you got for a run,

786
00:39:03,075 --> 00:39:06,343
your phone goes to sleep, it collects a bunch of locations

787
00:39:06,345 --> 00:39:09,312
and I'm not gonna talk about how you'd set that up but

788
00:39:09,314 --> 00:39:11,781
you can look in the documentation. And when you're

789
00:39:11,783 --> 00:39:14,317
pick your phone up and then and say, how was my run. Boom!

790
00:39:14,319 --> 00:39:16,619
You're gonna get all these locations as an array here.

791
00:39:16,621 --> 00:39:19,289
Okay, with time stamps and all that, so you'll be able to

792
00:39:19,291 --> 00:39:23,727
reconstruct the run. Okay, similar APIs this, for

793
00:39:23,729 --> 00:39:27,797
heading, if you wanna just monitor the user's heading.

794
00:39:28,333 --> 00:39:29,799
Error reporting is important and

795
00:39:29,801 --> 00:39:32,669
easy to miss because you have to implement another delegate

796
00:39:32,671 --> 00:39:35,171
method here, which is locationManagerDidFailWithEr-

797
00:39:35,173 --> 00:39:38,908
ror. But you definitely do want to be looking at this.

798
00:39:38,910 --> 00:39:39,142
Okay if you have,

799
00:39:39,144 --> 00:39:41,478
if you are using a location you have to implement this.

800
00:39:41,480 --> 00:39:45,148
Because for example the user could at any time go to their

801
00:39:45,150 --> 00:39:45,215
say no I don't want this guy using my location.

802
00:39:45,217 --> 00:39:46,916
settings and

803
00:39:46,918 --> 00:39:50,420
In which case you're gonna start getting this denied.

804
00:39:50,422 --> 00:39:53,289
And if you don't look for this, your output's just gonna

805
00:39:53,291 --> 00:39:55,792
go into some wacky state because it's not gonna know

806
00:39:55,794 --> 00:39:57,861
what's happening. Okay you need to what's happening.

807
00:39:57,863 --> 00:40:01,598
Also, error location unknown. If from some reason, it,

808
00:40:01,600 --> 00:40:04,300
we can't find the location. Maybe you asked for best for

809
00:40:04,302 --> 00:40:07,404
navigation, it just can't find any, thing to give you your

810
00:40:07,406 --> 00:40:10,273
location, so you wanna know that as well, okay?

811
00:40:10,275 --> 00:40:11,808
So definitely wanna look at this thing.

812
00:40:11,810 --> 00:40:14,978
If you're doing location manager in your final project,

813
00:40:14,980 --> 00:40:19,482
you got to implement this, okay? All right,

814
00:40:19,484 --> 00:40:21,718
lets talk about getting your location in the background,

815
00:40:21,720 --> 00:40:24,487
verses about getting your location in the foreground.

816
00:40:24,489 --> 00:40:26,723
Okay, so when you get in the foreground it's all

817
00:40:26,725 --> 00:40:29,225
the things we just talked about.

818
00:40:29,227 --> 00:40:31,628
There's a bird in here with it.

819
00:40:31,630 --> 00:40:32,929
When you're in the background, though,

820
00:40:32,931 --> 00:40:34,764
things are a little different because you know that

821
00:40:34,766 --> 00:40:36,800
generally you're not allowed to run in the background.

822
00:40:36,802 --> 00:40:40,170
You kind of go quiet, and then you get in those cycles. But

823
00:40:40,172 --> 00:40:42,439
there are ways you, you remember when we went and

824
00:40:42,441 --> 00:40:45,408
enabled iCloud in that capabilities thing? Well,

825
00:40:45,410 --> 00:40:48,478
there's things in there where you can enable backgrounding

826
00:40:48,480 --> 00:40:52,015
for locations, okay? Now if you do this

827
00:40:52,017 --> 00:40:53,883
you will continue to get stuff in the background.

828
00:40:53,885 --> 00:40:56,653
You can imagine it's even more important to be sure you're

829
00:40:56,655 --> 00:40:58,188
not sucking the battery at this,

830
00:40:58,190 --> 00:41:01,090
in this situation, okay? And this is the kind of thing,

831
00:41:01,092 --> 00:41:03,326
if you're sucking the battery in the background there,

832
00:41:03,328 --> 00:41:06,162
your App Store app might not get approved, okay?

833
00:41:06,164 --> 00:41:07,764
That's how important it is not to be sitting there

834
00:41:07,766 --> 00:41:10,633
sucking the battery in the background, okay? Now,

835
00:41:10,635 --> 00:41:14,304
there are other ways though, very battery-efficient ways,

836
00:41:14,306 --> 00:41:15,738
to get your location in the background, so

837
00:41:15,740 --> 00:41:19,476
let's talk about those. One is that significant monitoring I

838
00:41:19,478 --> 00:41:22,779
thing I was telling you about where you're walking around,

839
00:41:22,781 --> 00:41:24,814
and it notices a new cell tower so

840
00:41:24,816 --> 00:41:27,183
it's very kind of large grained.

841
00:41:27,185 --> 00:41:29,953
That's an awesome way to get locations for

842
00:41:29,955 --> 00:41:33,289
very low battery, uses almost no battery to do this. And

843
00:41:33,291 --> 00:41:35,959
what's more and really cool about it, if you're app is in

844
00:41:35,961 --> 00:41:39,662
the background. You'll get the notification if it's not even

845
00:41:39,664 --> 00:41:44,234
running, it will get launched and told this information. So

846
00:41:44,236 --> 00:41:49,472
this a very powerful telling you where the location is.

847
00:41:49,474 --> 00:41:51,074
And when it gets launched, by the way, if,

848
00:41:51,076 --> 00:41:53,776
if they're using some other app, it will launch it and

849
00:41:53,778 --> 00:41:54,844
launch you in the background.

850
00:41:54,846 --> 00:41:56,513
So you can figure out where you are and

851
00:41:56,515 --> 00:41:57,747
decide if you need to do something.

852
00:41:57,749 --> 00:42:00,416
Okay, so this one is really cool, really low power,

853
00:42:00,418 --> 00:42:03,520
the only problem with it, it's large grained. Now,

854
00:42:03,522 --> 00:42:06,823
once you get woken up, that you've significantly changed,

855
00:42:06,825 --> 00:42:10,793
you could start doing more close location, KGPS location,

856
00:42:10,795 --> 00:42:12,662
try and find out a little bit exactly where you are,

857
00:42:12,664 --> 00:42:16,666
if you want. Although be careful not to take too long,

858
00:42:16,668 --> 00:42:17,133
when you get launched for

859
00:42:17,135 --> 00:42:19,802
this in the background because the system will stop doing

860
00:42:19,804 --> 00:42:24,674
this. If you, you know starts consuming a lot of resources

861
00:42:24,676 --> 00:42:29,779
in the background there, okay? So be careful with that.

862
00:42:29,781 --> 00:42:32,615
Similarly is the region base monitoring, okay?

863
00:42:32,617 --> 00:42:34,551
Where you specify a circle or beacons,

864
00:42:34,553 --> 00:42:38,254
okay? That also will wake you up and even launch your

865
00:42:38,256 --> 00:42:41,991
application if it notices you going into that region. Okay,

866
00:42:41,993 --> 00:42:45,862
and run you in the background. Also low power, you know,

867
00:42:45,864 --> 00:42:48,798
really nice way to do it. So if that will meet your needs

868
00:42:48,800 --> 00:42:52,535
as well, that's a good one to do, okay.

869
00:42:52,537 --> 00:42:56,039
When you enter a region, either beacon or

870
00:42:56,041 --> 00:42:59,576
circular region, you're gonna get these delegate methods.

871
00:42:59,578 --> 00:43:01,244
didEnterRegion, didExitRegion, and

872
00:43:01,246 --> 00:43:05,114
monitoringDidFailForRegion. Also here's the error handler

873
00:43:05,116 --> 00:43:09,118
for that one, okay? So that's kind of a fun one.

874
00:43:09,120 --> 00:43:12,355
Region-monitoring works when you're not running because all

875
00:43:12,357 --> 00:43:15,592
your regions are named, okay? They all have to have unique

876
00:43:15,594 --> 00:43:18,695
names, and so when you get launched you'll know which one

877
00:43:18,697 --> 00:43:23,600
fired by its name. You also, there is by the way a maximum

878
00:43:23,602 --> 00:43:26,269
limit to the circular region called maximum region

879
00:43:26,271 --> 00:43:28,504
monitoring distance, you want to look at that.

880
00:43:28,506 --> 00:43:30,940
You can't say when I enter the United States,

881
00:43:30,942 --> 00:43:33,009
okay that won't take that big of a region.

882
00:43:33,011 --> 00:43:36,546
It has to be much much smaller,and this will tell you

883
00:43:36,548 --> 00:43:41,084
how big it can be, okay? This is the beacon thing.

884
00:43:41,086 --> 00:43:42,518
When you're looking for beacons,

885
00:43:42,520 --> 00:43:45,288
what you're really interested in is how far from the beacon

886
00:43:45,290 --> 00:43:48,858
am I? Okay, am I close to it, like really, really next to

887
00:43:48,860 --> 00:43:51,294
it? Or a little bit far away or across the ways. So

888
00:43:51,296 --> 00:43:54,364
beacons are used for things like, you're going to a coffee

889
00:43:54,366 --> 00:43:56,599
shop and when you get right up to the register.

890
00:43:56,601 --> 00:43:58,701
Maybe it offers you a coupon or something like that,

891
00:43:58,703 --> 00:44:00,803
well it needs to know you're right near the register.

892
00:44:00,805 --> 00:44:03,773
But maybe when you just walk in the store it just gives you

893
00:44:03,775 --> 00:44:07,010
an advertisement or directs you to some display, okay?

894
00:44:07,012 --> 00:44:09,679
So the beacon would be sitting maybe near the register and

895
00:44:09,681 --> 00:44:12,515
so this thing is telling you. That's why we call it ranging,

896
00:44:12,517 --> 00:44:15,652
start ranging these beacons. Now these beacons could be

897
00:44:15,654 --> 00:44:19,055
other iOS devices, could serve as a beacon, okay? Or

898
00:44:19,057 --> 00:44:23,159
you could even buy these third party stand alone eye beacons

899
00:44:23,161 --> 00:44:26,963
basically that will act as beacons. If you wanted to be

900
00:44:26,965 --> 00:44:30,033
a beacon, okay, that's beyond the scope of this class.

901
00:44:30,035 --> 00:44:32,135
I can't really tell you how to do that, okay.

902
00:44:32,137 --> 00:44:35,471
You need to get the Core Bluetooth Framework involved

903
00:44:35,473 --> 00:44:37,940
here and check out CBPeripheralManager.

904
00:44:37,942 --> 00:44:41,344
It will show you how to do it but it's a little more

905
00:44:41,346 --> 00:44:44,747
complicated than I can show in a couple slides so.

906
00:44:44,749 --> 00:44:48,084
So that's it for core location. Let's now talk about

907
00:44:48,086 --> 00:44:50,687
Map Kit which is the UI way of showing location.

908
00:44:50,689 --> 00:44:55,191
MKMapView is a UI view that displays a map, okay?

909
00:44:55,193 --> 00:44:59,862
Looks just like the maps app, on iOS.

910
00:44:59,864 --> 00:45:03,533
A map can have annotations, like this little red pin

911
00:45:03,535 --> 00:45:07,570
down there, okay? Each annotation has a coordinate,

912
00:45:07,572 --> 00:45:11,140
obviously the GPS location where that thing is, and also

913
00:45:11,142 --> 00:45:15,545
a title. And a subtitle, okay, there's no subtitle shown

914
00:45:15,547 --> 00:45:16,412
in this one right here,

915
00:45:16,414 --> 00:45:21,451
okay? The annotations though can also have this call out,

916
00:45:21,453 --> 00:45:24,587
this white area. That's not part of the annotation view,

917
00:45:24,589 --> 00:45:29,625
that's a call out that the annotation view brings up. So

918
00:45:29,627 --> 00:45:32,595
we're going to talk about the components of this callout

919
00:45:32,597 --> 00:45:35,431
in a second as well. Actually it's talking right now.

920
00:45:35,433 --> 00:45:38,301
[COUGH] It's got a left accessory view and

921
00:45:38,303 --> 00:45:39,335
a right accessory view.

922
00:45:39,337 --> 00:45:42,505
And these are usually things like UI image views or

923
00:45:42,507 --> 00:45:46,843
maybe UI buttons things like that, okay. So this is how

924
00:45:46,845 --> 00:45:51,047
we're going to build our map UIs out of these components.

925
00:45:51,049 --> 00:45:52,281
So how do you create with MapView?

926
00:45:52,283 --> 00:45:55,852
Really easy. MKMapView or MKMapView with a frame,

927
00:45:55,854 --> 00:45:59,388
initializer, or you can drag it out in your storyboard,

928
00:45:59,390 --> 00:46:02,759
which is what we'll do in the demo. And MapView, what

929
00:46:02,761 --> 00:46:06,129
does it, how does it basically work? It's got an array,

930
00:46:06,131 --> 00:46:09,932
this var annotations which is an array of MKAnnotation,

931
00:46:09,934 --> 00:46:15,271
okay. MKAnnotation is not a class, it's a protocol. So

932
00:46:15,273 --> 00:46:18,074
anything could be an annotation on a map as long as

933
00:46:18,076 --> 00:46:21,577
it implements this protocol. What is that protocol?

934
00:46:21,579 --> 00:46:26,048
It has coordinate, title, and subtitle,

935
00:46:26,050 --> 00:46:29,085
okay? If you implement those three bars, boom,

936
00:46:29,087 --> 00:46:32,655
you can be thrown onto a map. You will be an MKAnnotation.

937
00:46:32,657 --> 00:46:36,626
They're all get, see? Var title is an optional string by

938
00:46:36,628 --> 00:46:38,528
the way but it's really expected to be implemented.

939
00:46:38,530 --> 00:46:41,998
Don't ever leave this nil or system does not like that,

940
00:46:42,000 --> 00:46:45,201
okay? I'm not sure why, it's optional, should be and then

941
00:46:45,203 --> 00:46:47,937
the core location coordination coordinate remember that's

942
00:46:47,939 --> 00:46:53,643
cllocation coordinate 2D, latitude and longitude Ok,

943
00:46:53,645 --> 00:46:56,445
so that's it. So it's got this array of annotations but

944
00:46:56,447 --> 00:47:00,550
you notice this array is read only. So to add annotations or

945
00:47:00,552 --> 00:47:03,719
remove annotations you have to use these methods, add or

946
00:47:03,721 --> 00:47:05,087
remove annotations.

947
00:47:06,825 --> 00:47:08,991
It's generally a good idea from a performance perspective

948
00:47:08,993 --> 00:47:13,229
to add all of your annotations that you know about up front.

949
00:47:13,231 --> 00:47:14,564
And that's because the annotation views,

950
00:47:14,566 --> 00:47:19,101
those little pins. Get reused just like in a table view,

951
00:47:19,103 --> 00:47:21,671
okay? So you might as well add them all upfront and

952
00:47:21,673 --> 00:47:24,974
let the system reuse the pins as you scroll,

953
00:47:24,976 --> 00:47:30,246
scroll around the world. Okay, can reuse them. What do

954
00:47:30,248 --> 00:47:32,782
annotations look like on the map? Well we saw it before,

955
00:47:32,784 --> 00:47:37,453
right? If you use an MKPinAnnotationView, which is

956
00:47:37,455 --> 00:47:40,890
a subclass of MKAnnotationView you get a little pin.

957
00:47:40,892 --> 00:47:44,126
It can be red or purple I think or maybe another

958
00:47:44,128 --> 00:47:47,063
color. But it does allow you to even change this image. If

959
00:47:47,065 --> 00:47:49,599
you don't like a pin, you can change it to something else.

960
00:47:49,601 --> 00:47:51,934
And when you click on the PinAnnotationView,

961
00:47:51,936 --> 00:47:52,568
you get this call out. And

962
00:47:52,570 --> 00:47:56,973
that's what the call out looks like, okay? So what happens

963
00:47:56,975 --> 00:48:00,509
when you press the pin besides this call-out coming out? And

964
00:48:00,511 --> 00:48:05,214
by the way, this call-out only comes out if canShowCallout is

965
00:48:05,216 --> 00:48:08,551
true on the MK annotation pin annotation view.

966
00:48:08,553 --> 00:48:11,520
So you have to have that be true. So this will come up,

967
00:48:11,522 --> 00:48:14,690
but in addition to this appearing, a delegate method

968
00:48:14,692 --> 00:48:17,994
will be sent to the map views delegate. It's called

969
00:48:17,996 --> 00:48:22,999
Map view did select annotation view, okay? And so this

970
00:48:23,001 --> 00:48:25,601
is important little method right here because if you're

971
00:48:25,603 --> 00:48:30,039
gonna show anything expensive in your call out, like so

972
00:48:30,041 --> 00:48:32,008
you're gonna go over their network and grab an image or

973
00:48:32,010 --> 00:48:34,777
something like that. You're gonna wanna wait to do it

974
00:48:34,779 --> 00:48:37,580
until didSelectAnnotationView. Because if the user never

975
00:48:37,582 --> 00:48:40,549
clicks on this pin, he's never gonna see that image. So you

976
00:48:40,551 --> 00:48:43,552
don't wanna waste your time fetching it. Okay? So this

977
00:48:43,554 --> 00:48:45,821
is a place where you're gonna do expensive stuff that's

978
00:48:45,823 --> 00:48:48,291
gonna show in the call out. You also, though,

979
00:48:48,293 --> 00:48:51,027
might segue out of this. When someone clicks on a pin,

980
00:48:51,029 --> 00:48:54,463
maybe you wanna go segue to some other view, I don't know.

981
00:48:54,465 --> 00:48:58,868
Okay, but this is the target action of MKAnnotations.

982
00:48:59,003 --> 00:49:01,671
All right, so how are these AnnotationViews, these little

983
00:49:01,673 --> 00:49:04,440
pins created and associated with those annotations?

984
00:49:04,442 --> 00:49:07,610
Because we know MKMap View only has this array of

985
00:49:07,612 --> 00:49:11,347
annotations. So how do those pins get there to show them?

986
00:49:11,349 --> 00:49:14,550
And the answer is from this delegate method right here,

987
00:49:14,552 --> 00:49:15,651
MapView, viewForAnnotation.

988
00:49:15,653 --> 00:49:18,888
This is very much like self or roll in index path in table

989
00:49:18,890 --> 00:49:22,091
view. Okay? So in there, you're creating a cell which

990
00:49:22,093 --> 00:49:25,361
is a view. Okay, UI table view cell. Here you're creating

991
00:49:25,363 --> 00:49:28,864
an MK annotation view like the Pin annotation view. Okay. So

992
00:49:28,866 --> 00:49:31,600
let's go through this and see how we do it. First we're

993
00:49:31,602 --> 00:49:36,505
gonna dq a reusable one using some identifier but

994
00:49:36,507 --> 00:49:40,876
if that fail, okay and view is nil if we can't dq one

995
00:49:40,878 --> 00:49:44,914
then there's no prototype like there is in the table view so

996
00:49:44,916 --> 00:49:47,717
we have to create the prototype in code. So

997
00:49:47,719 --> 00:49:49,185
here I'm creating the prototype by saying,

998
00:49:49,187 --> 00:49:52,955
view equals MK pin Annotation view, okay? But I'm specifying

999
00:49:52,957 --> 00:49:56,559
that sam reuse identifier that later I might come back and do

1000
00:49:56,561 --> 00:49:59,595
this reuseable with, you see? So that's how they get done.

1001
00:49:59,597 --> 00:50:02,665
And then can't show call out either set to true or false,

1002
00:50:02,667 --> 00:50:05,768
whichever one you want. Okay.

1003
00:50:05,770 --> 00:50:07,570
Then we're gonna whether we created the view or

1004
00:50:07,572 --> 00:50:10,206
not, we're gonna wanna set the view's annotation to be

1005
00:50:10,208 --> 00:50:15,044
the annotation we're creating, this view for. And then,

1006
00:50:15,046 --> 00:50:18,881
we're gonna wanna prepare this view with anything else.

1007
00:50:18,883 --> 00:50:21,817
Like if it's gonna have a left call out accessor view,

1008
00:50:21,819 --> 00:50:22,318
which is an image view,

1009
00:50:22,320 --> 00:50:25,354
this is the time we would add the image view. This might not

1010
00:50:25,356 --> 00:50:28,624
be the time we actually go fetch the image to put there,

1011
00:50:28,626 --> 00:50:31,427
you might wait until didSelectAnnotationView for

1012
00:50:31,429 --> 00:50:34,630
you to do that but we're not gonna wanna put the UI image

1013
00:50:34,632 --> 00:50:37,867
view in there so that it's ready to go in the call out.

1014
00:50:37,869 --> 00:50:41,537
Okay, and then we're gonna return the view then

1015
00:50:41,539 --> 00:50:45,141
the system gonna use this view to show that pin.

1016
00:50:45,143 --> 00:50:47,777
Okay, interesting properties on UIAnnotationView,

1017
00:50:47,779 --> 00:50:49,078
we already talked about the left and

1018
00:50:49,080 --> 00:50:51,514
right CallOutAccessoryViews, which are just views.

1019
00:50:51,516 --> 00:50:55,317
There's also whether it's enabled or not. This image is

1020
00:50:55,319 --> 00:50:58,087
the image of the pin, not the image that's in the callout,

1021
00:50:58,089 --> 00:51:00,656
it's the image of the pin. Also you can

1022
00:51:00,658 --> 00:51:03,359
make it draggable, setting draggable to true. If you do

1023
00:51:03,361 --> 00:51:06,529
that your MKAnnotations, the coordinate property would have

1024
00:51:06,531 --> 00:51:09,465
to be get and set. Obviously if you're gonna drag it around

1025
00:51:09,467 --> 00:51:12,268
you have to be able to set the property as well.

1026
00:51:12,870 --> 00:51:16,605
Okay. This cool property or

1027
00:51:16,607 --> 00:51:19,642
delegate method right here calloutAccessoryControlTapped

1028
00:51:19,644 --> 00:51:23,813
will get sent to your map view delegates If your left or

1029
00:51:23,815 --> 00:51:27,049
right call out accessory is a ui control.

1030
00:51:27,051 --> 00:51:29,852
Basically a ui button okay? So if you put a button

1031
00:51:29,854 --> 00:51:32,455
at your left or right call out accessory when it gets touched

1032
00:51:32,457 --> 00:51:36,459
you're gonna get this call out accessory control tapped

1033
00:51:36,861 --> 00:51:39,695
method which is pretty cool.

1034
00:51:39,697 --> 00:51:42,631
In did select annotation view we talked about the fact

1035
00:51:42,633 --> 00:51:46,268
that this is where you might want to create your image or

1036
00:51:46,270 --> 00:51:50,706
even fire off a thread or q, on a different q, fire off

1037
00:51:50,708 --> 00:51:53,509
a request to go get the image. When it comes back later

1038
00:51:53,511 --> 00:51:57,813
you'll have to load it up into the accessory view. Okay?

1039
00:51:57,815 --> 00:51:59,982
Just like when you're scrolling around in a table

1040
00:51:59,984 --> 00:52:02,685
view, realize that if you're scrolling around on the map

1041
00:52:02,687 --> 00:52:06,455
you might fire off a dispatch async here to go get this

1042
00:52:06,457 --> 00:52:09,758
image, and when it comes back that image is no longer being

1043
00:52:09,760 --> 00:52:12,761
displayed in this call accessory view because it gets

1044
00:52:12,763 --> 00:52:17,566
reused, reused right by other ones. So be careful about

1045
00:52:17,568 --> 00:52:21,537
that. The map you can configure the way it displays.

1046
00:52:21,539 --> 00:52:24,673
This is a var on MKMapView. You can do standard,

1047
00:52:24,675 --> 00:52:27,710
satellite, or hybrid. So standard is like streets and

1048
00:52:27,712 --> 00:52:31,447
things like that, satellite is like Google Earth type thing.

1049
00:52:31,449 --> 00:52:35,251
And then hybrid is a mix, an overlay of those two things.

1050
00:52:35,253 --> 00:52:39,155
You can also show the user's current location. On the map

1051
00:52:39,157 --> 00:52:40,923
just by saying this Bool to true and it will show it.

1052
00:52:40,925 --> 00:52:43,659
I think the users current location is blue or maybe it's

1053
00:52:43,661 --> 00:52:46,128
purple, I don't know. But it will just show in there.

1054
00:52:46,130 --> 00:52:48,864
You can also get the users location as well.

1055
00:52:48,866 --> 00:52:51,500
As MKUserLocation which is just thing that implements

1056
00:52:51,502 --> 00:52:56,472
the MKAnnotation protocol. You can also restrict scrolling.

1057
00:52:56,474 --> 00:52:59,008
Okay, maybe you don't want. The 3D mode.

1058
00:52:59,010 --> 00:53:01,544
If you don't want 3D mode, set pitch enable to false and

1059
00:53:01,546 --> 00:53:06,248
it won't pitch up to show you 3D maps. You can control

1060
00:53:06,250 --> 00:53:08,851
the camera if you do allow 3D you can control

1061
00:53:08,853 --> 00:53:12,254
where the camera is pointing using this, API right here,

1062
00:53:12,256 --> 00:53:16,025
that's kind of fun. You can also say what part of

1063
00:53:16,027 --> 00:53:19,094
the world is being shown with the MP coordinate region which

1064
00:53:19,096 --> 00:53:22,998
is just a latitude longitude and a span okay which is

1065
00:53:23,000 --> 00:53:28,370
number of meters. Okay? So it shows that will show that part

1066
00:53:28,372 --> 00:53:32,208
of the Earth. Actually it's not it's not even meters.

1067
00:53:32,210 --> 00:53:35,044
The span is a delta of latitude and longitude.

1068
00:53:35,046 --> 00:53:36,078
How many degrees of latitude and

1069
00:53:36,080 --> 00:53:38,581
how many degrees of longitude to show.

1070
00:53:39,217 --> 00:53:43,886
Okay? What else we can do here?

1071
00:53:43,888 --> 00:53:46,722
I just want you to note that there's a whole bunch of

1072
00:53:46,724 --> 00:53:49,892
C-like functions, they're swift global functions,

1073
00:53:49,894 --> 00:53:52,494
they're not methods, that you can do to convert

1074
00:53:52,496 --> 00:53:55,064
like from map coordinates to view coordinates and

1075
00:53:55,066 --> 00:53:58,300
things like that. So make sure you take a look at these and

1076
00:53:58,302 --> 00:54:01,270
understand all of these. There's probably about 15 or

1077
00:54:01,272 --> 00:54:03,906
20 of them that will help you do conversions.

1078
00:54:03,908 --> 00:54:08,110
There's also some methods that will do it, as well,

1079
00:54:08,112 --> 00:54:13,415
in MKMapView. There's a cool method in MKMapView called

1080
00:54:13,417 --> 00:54:15,618
didChangeRegionAnimated.

1081
00:54:15,620 --> 00:54:18,087
Okay? So, if you tell the mapview to

1082
00:54:18,089 --> 00:54:21,257
show a different part of the world like New York, okay.

1083
00:54:21,259 --> 00:54:23,559
It's going to animate going there. It's going to

1084
00:54:23,561 --> 00:54:26,695
scroll over there. But if I'm in San Francisco and I say,

1085
00:54:26,697 --> 00:54:29,999
show New York it's gonna go whoo, okay, you're not even

1086
00:54:30,001 --> 00:54:32,534
gonna see it. Nebraska, you'll never see it okay.

1087
00:54:32,536 --> 00:54:35,337
In Nebraska, you can go by so fast. You'll never see it.

1088
00:54:35,339 --> 00:54:36,905
What would be really cool is if you said,

1089
00:54:36,907 --> 00:54:39,408
I'm in San Francisco, show New York, first you said

1090
00:54:39,410 --> 00:54:42,678
show the whole United States then show New York.

1091
00:54:42,680 --> 00:54:45,681
Right then you get this cool animation. San Francisco to

1092
00:54:45,683 --> 00:54:47,249
the whole United States down to New York.

1093
00:54:47,251 --> 00:54:49,318
Wouldn't that be cool? Yes it would. And so

1094
00:54:49,320 --> 00:54:52,621
the way you do that is you first of all set your location

1095
00:54:52,623 --> 00:54:53,489
to the whole United States or

1096
00:54:53,491 --> 00:54:56,358
middle of the United States with a large span and it will

1097
00:54:56,360 --> 00:54:59,695
go up to there and as soon as the animation of that finishes

1098
00:54:59,697 --> 00:55:04,166
you'll get sent this. Okay cuz it's a did change region.

1099
00:55:04,168 --> 00:55:04,533
It finished the change region.

1100
00:55:04,535 --> 00:55:08,537
As soon as it sends you this now you animate to New York.

1101
00:55:08,706 --> 00:55:10,005
So essentially chaining you see.

1102
00:55:10,007 --> 00:55:11,907
And now it will [INAUDIBLE] New York. So this is the way

1103
00:55:11,909 --> 00:55:14,276
you can chain animations to make the animations kind of

1104
00:55:14,278 --> 00:55:18,480
fly around the world nicely. MKLocalSearch I'm not going to

1105
00:55:18,482 --> 00:55:21,750
really talk about it but it's a way that you can put normal

1106
00:55:21,752 --> 00:55:25,321
English language descriptions of places like Ike's, and

1107
00:55:25,323 --> 00:55:27,423
it'll go and search. This is asynchronous,

1108
00:55:27,425 --> 00:55:30,626
cuz it's gonna go out on the internet to look this up. But

1109
00:55:30,628 --> 00:55:32,961
it'll come back and give you a bunch of,

1110
00:55:32,963 --> 00:55:38,734
locations that might match this search. Okay? Okay.

1111
00:55:38,903 --> 00:55:41,470
Similarly you can asked for the directions you can

1112
00:55:41,472 --> 00:55:44,273
say I wanna go from here to here and I'm gonna drive,

1113
00:55:44,275 --> 00:55:46,942
give me directions, and it will give you this thing

1114
00:55:46,944 --> 00:55:49,845
called MKRoute with also have turn by turn directions.

1115
00:55:49,847 --> 00:55:53,982
And also have an MKPolyline which is an object which will

1116
00:55:53,984 --> 00:55:56,652
draw this blue line right here Okay, and

1117
00:55:56,654 --> 00:55:59,888
how do you get this blue line showing on here?

1118
00:55:59,890 --> 00:56:02,624
You're gonna use another feature called overlays, okay.

1119
00:56:02,626 --> 00:56:05,728
Overlays are very much like annotations, but instead of

1120
00:56:05,730 --> 00:56:09,064
you have view for annotation, you have overlay view for

1121
00:56:09,066 --> 00:56:11,734
annotation or renderer for annotation.

1122
00:56:11,736 --> 00:56:15,137
Okay, and this renderer could be something like a polyline

1123
00:56:15,139 --> 00:56:17,506
renderer, and if you have a polyline renderer, and

1124
00:56:17,508 --> 00:56:21,643
you give it an MKPolyline that comes from that root thing,

1125
00:56:21,645 --> 00:56:24,146
you can draw that root, okay?

1126
00:56:24,148 --> 00:56:26,148
You also use overlays for your on own thing,

1127
00:56:26,150 --> 00:56:29,785
if you wanna draw a bounding area around something, or

1128
00:56:29,787 --> 00:56:33,255
you wanna draw your own path of where you went, you can do

1129
00:56:33,257 --> 00:56:36,492
all that with overlays. Okay if you wanna do that in your

1130
00:56:36,494 --> 00:56:38,761
final project, it'll count as not covered in lecture,

1131
00:56:38,763 --> 00:56:39,728
cuz I'm not really covering it,

1132
00:56:39,730 --> 00:56:41,130
I'm just telling you it's there, okay?

1133
00:56:41,132 --> 00:56:42,431
Same thing as local search and

1134
00:56:42,433 --> 00:56:46,268
all these things I've kind of glossed over here, okay?

1135
00:56:46,270 --> 00:56:49,104
These are some of the built-in renderers, polyline,

1136
00:56:49,106 --> 00:56:54,076
also circles, polygons, tiling, etc. Okay,

1137
00:56:54,078 --> 00:56:56,945
so that's it. Now we're gonna start a demo that's gonna last

1138
00:56:56,947 --> 00:57:01,650
across both lectures here, and we're gonna start by just

1139
00:57:01,652 --> 00:57:05,721
doing a simple app that takes some waypoints and throws them

1140
00:57:05,723 --> 00:57:09,291
on a map, so we can see how to do that. Also on Wednesday, in

1141
00:57:09,293 --> 00:57:12,394
addition to finishing up this demo I'm gonna cover the last

1142
00:57:12,396 --> 00:57:13,996
topic of the quarter which is persistence,

1143
00:57:13,998 --> 00:57:15,798
which is basically how to store things in the file

1144
00:57:15,800 --> 00:57:21,537
system, right? Opening files and all that business. Okay,

1145
00:57:21,539 --> 00:57:24,873
so let's go start a new app here.

1146
00:57:24,875 --> 00:57:29,044
We're gonna create a brand new one. We'll create on iOS app,

1147
00:57:29,046 --> 00:57:33,015
Single View, as usual. We'll call this one Trax, okay?

1148
00:57:33,017 --> 00:57:37,052
Cuz it's gonna keep track of where you have been.

1149
00:57:37,054 --> 00:57:40,923
We'll make it a Universal app, so it works on iPhone and

1150
00:57:40,925 --> 00:57:46,595
iPad. There we go, we'll put it in our standard location.

1151
00:57:46,831 --> 00:57:50,265
All right, so here's Trax. In the storyboard right here

1152
00:57:50,267 --> 00:57:54,303
I'm going to, do my standard thing. We're gonna move,

1153
00:57:54,305 --> 00:57:58,373
some of these things off to Supporting Files here.

1154
00:57:58,375 --> 00:57:58,740
Supporting Files.

1155
00:57:58,742 --> 00:58:01,844
We're not gonna be needing to do anything in AppDelegate, so

1156
00:58:01,846 --> 00:58:04,513
I'll move it off to Supporting flies, Files here.

1157
00:58:04,515 --> 00:58:07,883
In my storyboard, I actually don't want my ViewController

1158
00:58:07,885 --> 00:58:10,319
here to be called generic View Controller.

1159
00:58:10,321 --> 00:58:13,856
So I'm gonna rename it to be GPXViewController,

1160
00:58:13,858 --> 00:58:16,492
cuz what we're gonna do is take a GPX file which,

1161
00:58:16,494 --> 00:58:19,194
like I said before, is just a file that contains a bunch

1162
00:58:19,196 --> 00:58:21,597
of GPS coordinates, and we're gonna put it on our map.

1163
00:58:21,599 --> 00:58:26,034
So we're gonna call this our GPXViewController, so

1164
00:58:26,036 --> 00:58:28,537
I'm gonna rename it here as well,

1165
00:58:28,539 --> 00:58:31,206
and also in my storyboard and go here to

1166
00:58:31,208 --> 00:58:35,978
the Identity Inspector change this to GPXViewController.

1167
00:58:35,980 --> 00:58:40,782
Okay, now let's also go ahead and build our UI here.

1168
00:58:40,784 --> 00:58:44,019
Our UI is gonna be all map, all the time. Okay, our entire

1169
00:58:44,021 --> 00:58:48,390
UI is just gonna be a gigantic map. So I'm gonna go down to

1170
00:58:48,392 --> 00:58:50,592
my object palette down here and try and find map,

1171
00:58:50,594 --> 00:58:53,262
actually, I'm gonna search for it by just typing map.

1172
00:58:53,264 --> 00:58:56,265
Here it is, a Map Kit View, and you drag that out and

1173
00:58:56,267 --> 00:59:00,836
put it here. Make it fill the entire MVC scene.

1174
00:59:00,838 --> 00:59:03,705
Of course, we'll do Reset to Suggested Constraints, and

1175
00:59:03,707 --> 00:59:06,441
we'll jump over here to our size inspector and make sure

1176
00:59:06,443 --> 00:59:09,411
it did the right thing. Sure looks like it did. Let's go

1177
00:59:09,413 --> 00:59:12,748
ahead and make an outlet to this from our controller. So

1178
00:59:12,750 --> 00:59:17,052
I'm just gonna Ctrl+drag in here. I'll call it my mapView.

1179
00:59:17,054 --> 00:59:20,756
Okay, you can see that it's a type MKMapView right there. So

1180
00:59:20,758 --> 00:59:25,961
we have our Map View. Let's go ahead and when our mapView

1181
00:59:25,963 --> 00:59:29,197
is set, let's go ahead and configure our mapView what we

1182
00:59:29,199 --> 00:59:35,337
want it to look like. So how about the mapView's, mapType.

1183
00:59:35,806 --> 00:59:38,206
And see it's not doing escape completion here.

1184
00:59:38,208 --> 00:59:40,842
Why not? Import MapKit.

1185
00:59:40,844 --> 00:59:44,012
Okay, just like CloudKit, it's a separate framework.

1186
00:59:44,014 --> 00:59:45,981
We need it, or it's not gonna know any of these types.

1187
00:59:45,983 --> 00:59:49,885
So we'll set our mapType to be Satellite, okay,

1188
00:59:49,887 --> 00:59:54,890
satellite images. Let's set our delegate,

1189
00:59:54,892 --> 00:59:59,361
of course. Nothing works in a mapView without a delegate, so

1190
00:59:59,363 --> 01:00:02,030
we absolutely have to use delegate, and

1191
01:00:02,032 --> 01:00:05,267
that means we'll have to be an MKMapViewDelegate.

1192
01:00:05,269 --> 01:00:09,171
All right, so we have our mapview set up here nicely,

1193
01:00:09,173 --> 01:00:14,876
oops. Okay, so now we need our model.

1194
01:00:14,878 --> 01:00:17,279
What's gonna be our model to this thing?

1195
01:00:17,281 --> 01:00:22,284
It's going to be a gpxURL. Okay, so this is gonna be

1196
01:00:22,286 --> 01:00:26,054
the URL to a GPX file, a file that contains coordinates.

1197
01:00:26,056 --> 01:00:27,823
And we're just gonna open that file,

1198
01:00:27,825 --> 01:00:30,592
look at all the GPX coordinates and display them.

1199
01:00:30,594 --> 01:00:35,097
And in fact, let's go ahead and in our viewDidLoad here

1200
01:00:35,099 --> 01:00:40,369
just load one up. So let's see, gpxURL equals,

1201
01:00:40,371 --> 01:00:45,674
how about this one right here, a string, which is

1202
01:00:45,676 --> 01:00:51,246
http://cs193p.stanford.edu/Va- cation,

1203
01:00:51,248 --> 01:00:55,951
oops, Vacation.gpx. Okay, so that's just a,

1204
01:00:55,953 --> 01:01:01,390
a URL I have around there that we can look at. Now this

1205
01:01:01,392 --> 01:01:05,560
is an http, so we'd better go over to our info.plist,

1206
01:01:05,562 --> 01:01:10,232
right here, and do the thing we always do here where we add

1207
01:01:10,234 --> 01:01:13,535
our App Transport settings right here.

1208
01:01:13,537 --> 01:01:18,507
Let's add Arbitrary Loads allowed, and we will

1209
01:01:18,509 --> 01:01:21,977
say YES. Everyone understand why we're doing that,

1210
01:01:21,979 --> 01:01:26,281
same thing we had to do with smash tag there. All right, so

1211
01:01:26,283 --> 01:01:29,918
we're all set up here, what are we gonna do when this is

1212
01:01:29,920 --> 01:01:35,323
set? Okay, so when our model is set, when this URL is set,

1213
01:01:35,325 --> 01:01:40,529
what are we gonna need to do here to make this work? Well,

1214
01:01:40,531 --> 01:01:43,265
if they set the URL equal to something, so

1215
01:01:43,267 --> 01:01:48,236
they didn't set it to be nil let's say. Then really what

1216
01:01:48,238 --> 01:01:52,841
I need to do is parse this file, this URL somehow. And

1217
01:01:52,843 --> 01:01:56,545
to do that, I'm going to introduce a little class that

1218
01:01:56,547 --> 01:02:00,849
I wrote called GPX, which will parse a GPX file and then give

1219
01:02:00,851 --> 01:02:03,618
you all the waypoints. Okay, so let's go ahead and

1220
01:02:03,620 --> 01:02:08,090
grab that file. It's right here, it's called GPX.swift.

1221
01:02:08,092 --> 01:02:10,492
Copy it in. Take a brief look at this thing,

1222
01:02:10,494 --> 01:02:15,163
what it does. All right, here's GPX, let's go ahead and

1223
01:02:15,165 --> 01:02:18,133
look at it just at its generated interface

1224
01:02:18,135 --> 01:02:23,371
here. No need to look at the code there.

1225
01:02:23,373 --> 01:02:26,208
All right, so here's the GPX, this class. And

1226
01:02:26,210 --> 01:02:30,545
the main thing it has is this, this var waypoints,

1227
01:02:30,547 --> 01:02:34,249
which is a array of GPX.Waypoint.

1228
01:02:34,251 --> 01:02:36,952
Let's go look at the GPX waypoint, that's right here.

1229
01:02:36,954 --> 01:02:40,756
So, the Waypoint is latitude and longitude, of course,

1230
01:02:40,758 --> 01:02:44,659
kind of some information about this waypoint, the date

1231
01:02:44,661 --> 01:02:48,497
the waypoint was captured. And it's also an entry,

1232
01:02:48,499 --> 01:02:51,233
this Waypoint is also an entry, which is this thing.

1233
01:02:51,235 --> 01:02:54,603
The entry can have any number of hyperlinks. So these would

1234
01:02:54,605 --> 01:02:58,240
be like URLs to photos or video that I might have taken

1235
01:02:58,242 --> 01:03:02,611
at this location when I was on my trek or whatever. Also it

1236
01:03:02,613 --> 01:03:06,381
has a name, which is the name of this waypoint, okay? May or

1237
01:03:06,383 --> 01:03:11,686
may not have a name, but if it does this is the name. Okay,

1238
01:03:11,688 --> 01:03:14,623
these links by the way, these GPX links is right here.

1239
01:03:14,625 --> 01:03:18,593
It's basically just URLs, hrefs, here,

1240
01:03:18,595 --> 01:03:21,797
okay. All right, so that's it. That's all this thing does is,

1241
01:03:21,799 --> 01:03:25,333
main thing is this, this array of waypoints, okay? So let's

1242
01:03:25,335 --> 01:03:29,704
go back to our controller here. So we do this GPX.parse.

1243
01:03:29,706 --> 01:03:34,576
Notice that this parse method in GPX is asynchronous.

1244
01:03:34,578 --> 01:03:37,112
It parses that file, and then later it calls you back.

1245
01:03:37,114 --> 01:03:40,682
It's a very nice asynchronous method in that it always calls

1246
01:03:40,684 --> 01:03:42,284
you back on the main queue, okay, so

1247
01:03:42,286 --> 01:03:45,187
we don't have to dispatch async or anything here. And

1248
01:03:45,189 --> 01:03:50,025
the only argument that's given when you do it is a GPX, which

1249
01:03:50,027 --> 01:03:54,596
is an instance of this class, and it has those waypoints.

1250
01:03:54,598 --> 01:03:57,632
So, what are we gonna do with these waypoints when they come

1251
01:03:57,634 --> 01:04:01,937
back? Well, if the, if it was able to parse it, basically if

1252
01:04:01,939 --> 01:04:06,241
this thing came back and it wasn't nil, then we're going

1253
01:04:06,243 --> 01:04:11,546
to add these waypoints to ourself. Waypoints,

1254
01:04:11,548 --> 01:04:14,583
okay, so we're gonna have to add, do this method here.

1255
01:04:14,585 --> 01:04:17,252
Also every time someone said that I'm also gonna clear any

1256
01:04:17,254 --> 01:04:20,522
waypoints that I already have. So I'm gonna implement these

1257
01:04:20,524 --> 01:04:24,292
two methods right here. Okay everybody cool with that? So

1258
01:04:24,294 --> 01:04:27,262
we're just getting those GPS waypoints out of this GPX

1259
01:04:27,264 --> 01:04:29,397
file. So we're gonna implement these two methods. So

1260
01:04:29,399 --> 01:04:34,035
let's do private func clearWaypoints. Okay, so for

1261
01:04:34,037 --> 01:04:37,072
clearWaypoints I just wanna remove all the annotations off

1262
01:04:37,074 --> 01:04:40,375
my map, remember the map just shows annotations? So

1263
01:04:40,377 --> 01:04:40,842
I'm gonna remove them all.

1264
01:04:40,844 --> 01:04:44,713
I'm gonna say mapView removeAnnotations which is

1265
01:04:44,715 --> 01:04:47,816
the mapView's current annotations, okay,

1266
01:04:47,818 --> 01:04:52,187
whatever the mapView currently has. Notice I'm doing this

1267
01:04:52,189 --> 01:04:55,824
MapView question mark here, that's because if this happens

1268
01:04:55,826 --> 01:04:59,828
in like a perform, prepare for segue or something like that,

1269
01:04:59,830 --> 01:05:02,030
then my mapView wouldn't be wired up yet.

1270
01:05:02,032 --> 01:05:04,799
So I don't want this to fail, I just want you to do nothing.

1271
01:05:04,801 --> 01:05:08,436
So that's why I'm doing MapView?. Okay and

1272
01:05:08,438 --> 01:05:13,775
then we have the addWaypoints, private func addWaypoints and

1273
01:05:13,777 --> 01:05:18,146
this one is going to take an array. Waypoints,

1274
01:05:18,148 --> 01:05:23,618
which is an array of these GPX.Waypoint objects. Okay,

1275
01:05:23,620 --> 01:05:25,720
so what do we wanna do in addWaypoints?

1276
01:05:25,722 --> 01:05:28,990
Well, we just want to add them as annotations. So I'm just

1277
01:05:28,992 --> 01:05:33,228
gonna say addAnnotations, these waypoints, right?

1278
01:05:33,230 --> 01:05:37,532
MapView, the other thing I'm gonna do is there's a way in

1279
01:05:37,534 --> 01:05:41,369
the MapView to say, show me all of these annotations.

1280
01:05:41,371 --> 01:05:46,474
You say showAnnotations, showAnnotations, and

1281
01:05:46,476 --> 01:05:47,342
it takes some annotations, and

1282
01:05:47,344 --> 01:05:49,978
I'll just give those same waypoints. And

1283
01:05:49,980 --> 01:05:50,645
I'll say animated true, and

1284
01:05:50,647 --> 01:05:54,582
what this will do is zoom the map to show these annotations,

1285
01:05:54,584 --> 01:06:00,255
okay. Now, a couple errors here. What are these errors?

1286
01:06:00,257 --> 01:06:03,758
Cannot convert value of array of GPS Waypoint to

1287
01:06:03,760 --> 01:06:07,862
expected argument which is array of MKAnnotation.

1288
01:06:07,864 --> 01:06:11,866
Ha! Right I said that the mapView takes MKAnnotations,

1289
01:06:11,868 --> 01:06:15,670
and these are GPS Waypoints. They're not MKAnnotations. But

1290
01:06:15,672 --> 01:06:20,208
we can easily turn a GPX Waypoint into an MKAnnotation

1291
01:06:20,210 --> 01:06:23,011
as long as we get it to implement those three methods,

1292
01:06:23,013 --> 01:06:25,880
right? So how are we gonna do that? Well let's create

1293
01:06:25,882 --> 01:06:29,050
another little file and we're just gonna add protocol

1294
01:06:29,052 --> 01:06:33,121
conformance via an extension which I talked about earlier

1295
01:06:33,123 --> 01:06:35,991
in the quarter but we haven't seen it actually happen. So

1296
01:06:35,993 --> 01:06:36,925
here I'm gonna create a Swift file.

1297
01:06:36,927 --> 01:06:41,096
I'm gonna call it mkgpx because it's MK annotated,

1298
01:06:41,098 --> 01:06:45,000
map kit stuff having to do with this GPX class right

1299
01:06:45,002 --> 01:06:49,938
here. And I'm going to import MapKit, MK, yeah MapKit.

1300
01:06:49,940 --> 01:06:51,740
All right, and what am I gonna do,

1301
01:06:51,742 --> 01:06:55,043
I'm gonna create an extension to GPX.Waypoint, and

1302
01:06:55,045 --> 01:06:58,480
it's going to implement the protocol MKAnnotation.

1303
01:06:58,482 --> 01:07:00,382
That's what this extension is going to do. So

1304
01:07:00,384 --> 01:07:05,453
this is how we can implement a protocol via an extension.

1305
01:07:05,455 --> 01:07:07,288
Okay now all you need to do is implement these things.

1306
01:07:07,290 --> 01:07:12,594
Remember there's coordinates that we have to do which is

1307
01:07:12,596 --> 01:07:17,665
a CLLocationCoordinate2D. We have to implement title, which

1308
01:07:17,667 --> 01:07:20,902
is a String, optional but we have to implement it and

1309
01:07:20,904 --> 01:07:23,805
then there's subtitle which can be any subtitle

1310
01:07:23,807 --> 01:07:27,075
information we want, okay, which is also a String.

1311
01:07:27,077 --> 01:07:29,644
So we just have to implement these three things and

1312
01:07:29,646 --> 01:07:32,113
then we will have successfully,

1313
01:07:32,282 --> 01:07:36,951
added the MKAnnotation conformant to Waypoint.

1314
01:07:36,953 --> 01:07:38,486
So how are we going to implement these things?

1315
01:07:38,488 --> 01:07:41,189
Okay well coordinate this is not coordination this is

1316
01:07:41,191 --> 01:07:44,459
coordinate okay? The coordinate is easy to

1317
01:07:44,461 --> 01:07:47,662
implement because the GPXWaypoint knows latitude and

1318
01:07:47,664 --> 01:07:48,029
So I'm just gonna create a new LocationCoordinate2D okay, and

1319
01:07:48,031 --> 01:07:51,599
longitude.

1320
01:07:51,601 --> 01:07:54,803
it's gonna have latitude which is the latitude,

1321
01:07:54,805 --> 01:07:58,306
it's green there, you see? Because it's a var,

1322
01:07:58,308 --> 01:08:03,244
in this class, and then longitude. Okay, so

1323
01:08:03,246 --> 01:08:05,346
that was easy. How about the title?

1324
01:08:05,348 --> 01:08:07,916
Well, all these GPX Waypoints have that name, so

1325
01:08:07,918 --> 01:08:11,853
I'm just gonna return the name of the GPX Waypoint and

1326
01:08:11,855 --> 01:08:16,357
then they also have this thing called info, which is just

1327
01:08:16,359 --> 01:08:17,992
kind of information about the Waypoint.

1328
01:08:17,994 --> 01:08:22,263
That would be a good subtitle, okay? So just like that I've

1329
01:08:22,265 --> 01:08:25,834
turned GPX Waypoints into MKAnnotations and

1330
01:08:25,836 --> 01:08:28,636
this is how you use the map. You take usually something

1331
01:08:28,638 --> 01:08:30,905
you already have and make it implement this.

1332
01:08:30,907 --> 01:08:33,374
Now you could create a new class that all it does

1333
01:08:33,376 --> 01:08:35,710
is implement MKAnnotation that's fine too, but

1334
01:08:35,712 --> 01:08:38,480
generally, usually have something lying around that

1335
01:08:38,482 --> 01:08:40,248
you can turn into an MKAnnotation. And

1336
01:08:40,250 --> 01:08:44,419
notice as soon as I do that, no more errors here, okay,

1337
01:08:44,421 --> 01:08:48,456
because this is now an array of MKAnnotation, okay,

1338
01:08:48,458 --> 01:08:53,027
all right. So let's go ahead and run this,

1339
01:08:53,029 --> 01:08:56,698
see what happens, lets go here, iPhone6, run,

1340
01:08:56,700 --> 01:08:58,967
see if it can open this GPX file up and

1341
01:08:58,969 --> 01:09:05,874
show us these waypoints. Up, sure enough there it is,

1342
01:09:05,876 --> 01:09:08,510
and it even did that showAnnotations right here,

1343
01:09:08,512 --> 01:09:10,378
okay. That zoomed to where it is so

1344
01:09:10,380 --> 01:09:11,146
it's showing all the annotations

1345
01:09:11,148 --> 01:09:13,915
it found in that GPX file. Let's see if we can see where

1346
01:09:13,917 --> 01:09:19,387
we are here. Zoom out. Looks like we are in what, what is,

1347
01:09:19,389 --> 01:09:25,960
anyone know where that is? Recognize that coastline?

1348
01:09:25,962 --> 01:09:29,497
Canada! Yeah, there's the United States, here's Canada.

1349
01:09:29,499 --> 01:09:32,333
Okay? So here we are, we got these things in Canada. Now,

1350
01:09:32,335 --> 01:09:35,170
if we click on some of these. Let's click on some,

1351
01:09:35,172 --> 01:09:38,540
see what happens. So I click, notice we get the name and

1352
01:09:38,542 --> 01:09:42,544
the info right. The title and the subtitle got it.

1353
01:09:42,546 --> 01:09:47,615
Now I happen to know that this GPX file has URLs of photos

1354
01:09:47,617 --> 01:09:52,020
that were taken at all of these locations, okay?

1355
01:09:52,022 --> 01:09:55,056
So the next thing we'd like to do is see those. Okay and

1356
01:09:55,058 --> 01:09:58,226
what I'm gonna try to do is put them as a thumbnail image

1357
01:09:58,228 --> 01:10:02,297
inside my left accessory view of these call outs.

1358
01:10:02,299 --> 01:10:06,534
Now to do that we're going to need to override or implement

1359
01:10:06,536 --> 01:10:09,270
that method viewForAnnotation. Notice we didn't implement

1360
01:10:09,272 --> 01:10:11,940
viewForAnnotation which is like self erode index path,

1361
01:10:11,942 --> 01:10:14,642
and when you don't you get this really simple call

1362
01:10:14,644 --> 01:10:16,611
out that has no left or right accessory view,

1363
01:10:16,613 --> 01:10:18,479
just has the title or subtitle, okay.

1364
01:10:18,481 --> 01:10:21,382
But we need to implement it so we can put a left accessory

1365
01:10:21,384 --> 01:10:23,785
view which is going to be a button. I'm gonna have it be a

1366
01:10:23,787 --> 01:10:25,920
button because I'm gonna want to be able to click on it in

1367
01:10:25,922 --> 01:10:29,824
and segue to show me the image later in the demo probably

1368
01:10:29,826 --> 01:10:33,261
next lecture. All right, so how are we gonna do this?

1369
01:10:33,263 --> 01:10:36,264
Well we have to implement that method viewForAnnotations.

1370
01:10:36,266 --> 01:10:38,566
So let's see if we can find it. There it is, okay.

1371
01:10:38,568 --> 01:10:42,904
MKMap viewForAnnotation, okay? It's asking us to provide

1372
01:10:42,906 --> 01:10:47,141
an annotation view for this annotation. So first, I'm

1373
01:10:47,143 --> 01:10:49,644
going to see if I can get it, and I'm actually gonna do

1374
01:10:49,646 --> 01:10:53,414
something kind of interesting here. I'm going to type this.

1375
01:10:53,416 --> 01:10:56,084
Now, normally you would say why are you putting a type

1376
01:10:56,086 --> 01:10:58,886
here. Because you could just say view equals something and

1377
01:10:58,888 --> 01:11:01,489
it would automatically infer the type. Well the reason is

1378
01:11:01,491 --> 01:11:05,727
cuz I want it to be implicitly unwrapped. Okay if I didn't

1379
01:11:05,729 --> 01:11:08,396
put this here, okay, then it would be an optional

1380
01:11:08,398 --> 01:11:10,965
because the thing I'm going to call returns an optional, but

1381
01:11:10,967 --> 01:11:12,767
I want it implicitly unwrapped so

1382
01:11:12,769 --> 01:11:14,035
the rest of my method method looks like.

1383
01:11:14,037 --> 01:11:16,838
The code and the rest of my method. Okay so

1384
01:11:16,840 --> 01:11:20,174
I'm gonna do here. I'm gonna ask the MapView to dequeue

1385
01:11:20,176 --> 01:11:22,710
a reusable annotationView with an identifier.

1386
01:11:22,712 --> 01:11:24,779
Now to be nice I have some constants, so

1387
01:11:24,781 --> 01:11:28,182
let's put them on the bottom here. Okay so

1388
01:11:28,184 --> 01:11:32,120
here's my constants that I have and I have a constant for

1389
01:11:32,122 --> 01:11:36,357
the reuse identifier here. Call it waypoint and say

1390
01:11:36,359 --> 01:11:42,297
Constants.AnnotationViewReuse- Identifier.

1391
01:11:42,299 --> 01:11:43,498
Okay, so that's de-queueing it.

1392
01:11:43,500 --> 01:11:46,934
Now what if this is the first pin it's ever doing? It's not

1393
01:11:46,936 --> 01:11:49,871
going to be able to de-queue. There's no pins to reuse.

1394
01:11:49,873 --> 01:11:51,139
There's none that were used and

1395
01:11:51,141 --> 01:11:53,841
are now left over. So now we're gonna have to say if

1396
01:11:53,843 --> 01:11:57,078
the view Equals nil we have to create this thing because

1397
01:11:57,080 --> 01:12:00,081
there's no prototypes like table view. So I'm going

1398
01:12:00,083 --> 01:12:04,185
to create the thing by saying I want an MKPinAnnotationView.

1399
01:12:04,187 --> 01:12:06,954
And the arguments to initialize here

1400
01:12:06,956 --> 01:12:10,158
are the annotation which is this annotation right here.

1401
01:12:10,160 --> 01:12:13,394
That's the annotation we're creating a view for. And

1402
01:12:13,396 --> 01:12:15,630
we wanna use the same ReuseIdentifier right here,

1403
01:12:15,632 --> 01:12:19,367
because in future, we want this one that we're creating

1404
01:12:19,369 --> 01:12:23,004
to be in the reuse queue, okay? And

1405
01:12:23,006 --> 01:12:26,874
I'm also gonna say that we can show callouts.

1406
01:12:27,210 --> 01:12:28,843
Okay, because by default, I believe,

1407
01:12:28,845 --> 01:12:30,611
if you create an MKPinAnnotationView,

1408
01:12:30,613 --> 01:12:32,447
it won't show the callouts when you click on it.

1409
01:12:32,449 --> 01:12:33,948
So I wanna make sure it does show the callouts,

1410
01:12:33,950 --> 01:12:36,684
cuz that's where my left accessory view is gonna be.

1411
01:12:36,686 --> 01:12:40,154
Otherwise, if I was able to dequeue one here then I need

1412
01:12:40,156 --> 01:12:45,259
to change the annotation in it to be this annotation here.

1413
01:12:46,296 --> 01:12:48,062
Okay? All right,

1414
01:12:48,064 --> 01:12:51,032
now we've got this view, this is basically exactly what's

1415
01:12:51,034 --> 01:12:53,568
happening if we don't implement this method. Okay?

1416
01:12:53,570 --> 01:12:56,471
And in fact, if I run this, if I just return this view and

1417
01:12:56,473 --> 01:12:58,840
run it, you're gonna see it looks exactly the same,

1418
01:12:58,842 --> 01:13:03,911
okay the system basically will do exactly this for you. See?

1419
01:13:03,913 --> 01:13:07,515
If you don't implement it okay? So it's doing exactly

1420
01:13:07,517 --> 01:13:12,353
the same thing. So now,let's add this left annotation view

1421
01:13:12,355 --> 01:13:16,858
which wants to be a ui button. So how are we gonna do that?

1422
01:13:16,860 --> 01:13:20,795
Okay well, let's just first of all let's set the left

1423
01:13:20,797 --> 01:13:24,899
leftCalloutAccessoryView to be nil. I'm just going to put

1424
01:13:24,901 --> 01:13:29,570
this little button in there if the GPS point has a photo.

1425
01:13:29,572 --> 01:13:31,305
If it doesn't have a thumbnail image,

1426
01:13:31,307 --> 01:13:32,607
I don't want that button to

1427
01:13:32,609 --> 01:13:34,509
be there empty. So, first of all,

1428
01:13:34,511 --> 01:13:35,376
I'm going to clear it out.

1429
01:13:35,378 --> 01:13:39,514
Then I'm going to say if I can get the waypoint, which I

1430
01:13:39,516 --> 01:13:42,683
should be able to because it's just the annotation

1431
01:13:42,685 --> 01:13:47,755
As a GPX waypoint, right? That's what the waypoint is.

1432
01:13:47,757 --> 01:13:50,658
This annotation, all of our annotations are that. So

1433
01:13:50,660 --> 01:13:51,826
as long I'm able to get that waypoint,

1434
01:13:51,828 --> 01:13:55,029
which I should be able to, then if the waypoint has

1435
01:13:55,031 --> 01:14:01,636
a thumbnail URL, if that doesn't equal

1436
01:14:01,638 --> 01:14:05,440
nil Now this is something I'm gonna have to implement okay.

1437
01:14:05,442 --> 01:14:06,941
Because it doesn't have that method, so

1438
01:14:06,943 --> 01:14:08,543
I'm going to have to implement that method.

1439
01:14:08,545 --> 01:14:11,512
Then, I'm gonna set my left column so AccessoryView

1440
01:14:11,514 --> 01:14:15,783
to be a UI button. Whose frame is this constant.

1441
01:14:15,785 --> 01:14:18,453
Unfortunately I have to do a constant here for

1442
01:14:18,455 --> 01:14:21,956
this and I'll show that in a second. The constant for

1443
01:14:21,958 --> 01:14:25,593
this is 59 by 59. This is one of the few cases

1444
01:14:25,595 --> 01:14:28,329
in IOS where you're gonna use a magic number. But

1445
01:14:28,331 --> 01:14:30,498
unfortunately, they're just doesn't seem to be anyway,

1446
01:14:30,500 --> 01:14:34,135
at least that I've ever found, to ask the map views and

1447
01:14:34,137 --> 01:14:38,239
notation view how big is your call-out so that I can make

1448
01:14:38,241 --> 01:14:41,375
the thing the right size. So, I just Know that 59 by

1449
01:14:41,377 --> 01:14:43,978
59 works. I hope Apple doesn't change the size of that

1450
01:14:43,980 --> 01:14:46,380
callout in the future, cuz it might break this code.

1451
01:14:46,382 --> 01:14:47,715
That's why you never want magic numbers,

1452
01:14:47,717 --> 01:14:50,985
but unfortunately, we're kind of stuck with one here.

1453
01:14:50,987 --> 01:14:53,488
So, we have this error because thumbnailURL is not

1454
01:14:53,490 --> 01:14:56,557
implemented. So, how are we gonna implement thumbnailURL?

1455
01:14:56,559 --> 01:14:59,827
Well, I told you that every GPX waypoint can have

1456
01:14:59,829 --> 01:15:02,630
a number of links associated with one of them,

1457
01:15:02,632 --> 01:15:04,632
one of my view thumbnailURL. So

1458
01:15:04,634 --> 01:15:08,803
I'm gonna go back to my MKGPX right here and

1459
01:15:08,805 --> 01:15:11,806
I'm gonna add this var thumbnailURL, which

1460
01:15:11,808 --> 01:15:15,776
is gonna be an NSURL. And this is gonna be optional because,

1461
01:15:15,778 --> 01:15:18,546
it might be that it doesn't have one. Which is fine,

1462
01:15:18,548 --> 01:15:21,215
now I just want to show this little side button. And

1463
01:15:21,217 --> 01:15:24,352
to implement this, I'm gonna implement a little method

1464
01:15:24,354 --> 01:15:28,422
here, a private func, which goes through the links and

1465
01:15:28,424 --> 01:15:31,425
tries to find one of the type thumbnail. So it's gonna be

1466
01:15:31,427 --> 01:15:36,464
called getImageURLofType. It's gonna take a certain type,

1467
01:15:36,466 --> 01:15:39,367
which is just a string like thumbnail or something like

1468
01:15:39,369 --> 01:15:45,640
that. And it's going to return an NSURL possibly if

1469
01:15:45,642 --> 01:15:46,474
you can find such a thing, and

1470
01:15:46,476 --> 01:15:51,345
I'm just gonna go through the links in the GPXWayPoint. And

1471
01:15:51,347 --> 01:15:55,082
if the links type equals the type am asking for then am

1472
01:15:55,084 --> 01:15:58,619
just gonna return the links URL, and if I can't do any of

1473
01:15:58,621 --> 01:16:02,924
that I'll return nil. Okay? So this gets an ImageURLofType,

1474
01:16:02,926 --> 01:16:07,662
so here I'm gonna get the ImageURLofTyp.

1475
01:16:07,664 --> 01:16:10,231
So if it's able to get a thumbnail image, woo hoo,

1476
01:16:10,233 --> 01:16:13,568
we're good to go, otherwise it'll be returning nil here.

1477
01:16:13,570 --> 01:16:17,738
While I'm here I'm gonna have another one called imageURL

1478
01:16:17,740 --> 01:16:20,708
which gets the URL of the image large.

1479
01:16:20,710 --> 01:16:23,578
Okay, not a thumbnail of it, but a big, large image of it.

1480
01:16:23,580 --> 01:16:28,316
And so, that's the type large. Okay, so these are just types

1481
01:16:28,318 --> 01:16:33,321
associated with that link in the GPX file, okay? So

1482
01:16:33,323 --> 01:16:38,659
now we have these, we can go back here, and do this now.

1483
01:16:38,661 --> 01:16:40,428
Notice that we, Sorry.

1484
01:16:40,430 --> 01:16:43,364
[LAUGH] Create this leftCalloutAccessoryView here.

1485
01:16:43,366 --> 01:16:44,732
I'm actually gonna give this some space, but

1486
01:16:44,734 --> 01:16:47,401
we don't actually set the button's image. And

1487
01:16:47,403 --> 01:16:51,305
I'm not gonna set that image until the user clicks on me.

1488
01:16:51,307 --> 01:16:54,675
Okay? Soon as they click on my pin annotation view,

1489
01:16:54,677 --> 01:16:55,376
it makes our callout accessory

1490
01:16:55,378 --> 01:16:57,345
is gonna come up. Then I'm gonna go get the image.

1491
01:16:57,347 --> 01:16:58,646
Cuz getting the image is gonna be expensive.

1492
01:16:58,648 --> 01:17:01,616
Cuz I'm gonna go get it off the internet somewhere. Okay?

1493
01:17:01,618 --> 01:17:06,420
So let's do that and we do that in this method here

1494
01:17:06,422 --> 01:17:12,026
called did select annotation view.

1495
01:17:12,028 --> 01:17:14,895
Okay, so mapview delegate method here tells us when this

1496
01:17:14,897 --> 01:17:18,065
annotation view was selected. And so I'm gonna have to

1497
01:17:18,067 --> 01:17:21,469
extract some things here, like I need to get that thumbnail

1498
01:17:21,471 --> 01:17:24,972
image button from the left accessory view. That's just my

1499
01:17:24,974 --> 01:17:28,776
left call out accessory view and it better be a ui button.

1500
01:17:28,778 --> 01:17:31,112
So I'll that's what I'm doing if let here.

1501
01:17:31,114 --> 01:17:36,984
I'm also going to get the url which is the gpx waypoint

1502
01:17:36,986 --> 01:17:42,690
which is the annotation as a gpx waypoint okay?

1503
01:17:42,692 --> 01:17:47,028
It's it's thumbnail URL that method we just implemented.

1504
01:17:47,030 --> 01:17:49,764
Okay, I also need to get the image data.

1505
01:17:49,766 --> 01:17:54,835
Now I'm gonna be a really bad man here and I'm going

1506
01:17:54,837 --> 01:18:00,708
to do this on the main queue okay. Blocks main queue.

1507
01:18:00,710 --> 01:18:03,944
You would never do this in your final projects for

1508
01:18:03,946 --> 01:18:09,050
example okay. And now, I'm going to get the UI image that

1509
01:18:09,052 --> 01:18:18,592
corresponds to that data. All right?

1510
01:18:18,594 --> 01:18:22,596
So now I've run the gauntlet of all of these if lets and

1511
01:18:22,598 --> 01:18:24,899
I have the image and I have the thumbnail image button,

1512
01:18:24,901 --> 01:18:28,602
so I'm just gonna say thumbnail image button.

1513
01:18:28,604 --> 01:18:33,274
SetImage to be that image for the State. Remember

1514
01:18:33,276 --> 01:18:35,376
buttons have different states like highlight and state and

1515
01:18:35,378 --> 01:18:37,645
whatever so I don't want the normal state which is kinda

1516
01:18:37,647 --> 01:18:42,817
the default state, okay. So let's go and run that.

1517
01:18:47,690 --> 01:18:52,126
Right, here we go, a click on it and sure enough now we're

1518
01:18:52,128 --> 01:18:56,363
getting this thumbnail in here To that, okay? So

1519
01:18:56,365 --> 01:18:57,131
that's all we have time for today.

1520
01:18:57,133 --> 01:18:59,667
What we're gonna do next time is I'm gonna click on this

1521
01:18:59,669 --> 01:19:03,671
button, and we're gonna Segway to the image view controller

1522
01:19:03,673 --> 01:19:05,806
we have in Kissimmee. It's gonna Segway and

1523
01:19:05,808 --> 01:19:09,777
show us the full size image, the large image of that thing.

1524
01:19:09,779 --> 01:19:12,646
So once you have segue. Then, we'll go on and do some more

1525
01:19:12,648 --> 01:19:17,251
stuff to show off some other little features. All right?

1526
01:19:17,253 --> 01:19:20,087
So, see you next time. >> For

1527
01:19:20,089 --> 01:19:20,120
more, please visit us at stanford.edu.

